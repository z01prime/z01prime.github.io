<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01字典树</title>
      <link href="/2024/02/13/01%E5%AD%97%E5%85%B8%E6%A0%91/"/>
      <url>/2024/02/13/01%E5%AD%97%E5%85%B8%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>用于接近线性的查询异或相关的问题，如异或前缀和，和别的数的最大异或和等。<br>01字典树是按照二进制下每一位是0还是1将一些数进行分类，每一个结点的左孩子表示当前这一位是0的所有数，右孩子表示当前这一位是1的所有数，这样递归的分下去总可以把所有的数分类完。</p><p>如要求每次线性的回答一个数和一个数组中的所有元素的最大异或值，数组范围是2e5：<br>将数组中的所有数类似于哈夫曼树一样·按位建成一棵树，如3(0011)，8(1000)，5(0101)那么就可以画出一个这样的树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">       root</span><br><span class="line">    /        \</span><br><span class="line">   0          1</span><br><span class="line"> /   \        /</span><br><span class="line">0     1      0</span><br><span class="line"> \  /      /</span><br><span class="line">  1  0     0</span><br><span class="line">   \  \   /</span><br><span class="line">    11  0</span><br><span class="line">   (3)(5)(8)</span><br></pre></td></tr></table></figure><p>那么比如查询这些数和6(0110)异或后的最大值，想要异或完最大，那么就要求每一位都不一样，因为位数越高那么占得权值就越大，所以从前往后贪心，如果树在这个位上有不一样的分支那就往这条分支上走。6的第一位是0，那么要找第一位是1的，查询的时候要选右边的节点，所以确定了答案的第一位是1，然后发现6的第二位是1并且有是0的分支，那么往这条边上走，所以答案的第二位也是1，类似的答案的第三位也是1，但是在第四位的时候没有没有对应的1的分支，也就是说3、5、8中首位是1，第二第三的数字是0的数字中没有第四位是1的那么只能往0这条边上走，所以答案的第四位是0。然后结束查询，答案就是14(1110)。<br>同样的也可以快速地求出一个数组中最大的连续异或和：<br><a href="https://www.luogu.com.cn/problem/CF1847C">Vampiric Powers, anyone?</a><br>大致意思就是一个整数数组长度为m，可以进行任意次下面的操作：<br>选择一个索引i，然后在这个数组的末端插入一个元素使得数组长度+1,并且这个元素的值是从i到末尾的所有元素的异或之和。<br>这道题最后分析出来就是求最大连续子段异或和。<br>证明：假设不要求连续的子段组成的异或和，比如<code>8 2 4 12 1</code>那么显然最大的就是15(8,2,4,1)而不是14。考虑这中情况为什么不合法，非连续的含义可以转化成跳过一些数所得到的异或和，因为异或有归零律，那么只需要证明有三个数的数组<code>c a b</code>按照上述规则能产生跳过a后异或和中带b（即b不被抵消，a被抵消，也就是所有i小于2的异或和中，b的个数是奇数，a的个数是偶数）就能推出这个操作能跳过一些数得到的异或和。那么假设：一开始i选择3，得到<code>c a b b</code>那么就比如i=1的时候想要异或和中带b是不可能的因为只要i小于3那么每次操作得到的异或和中必定带有偶数个b相互抵消(i大于等于3时对于下一步i小于3时，情况和初始或者和i = 3效果是一样的，比如 i = 3<code>c a b b b^b =&gt; c a b b 0 =&gt; c a b b</code>,i = 4<code>c a b b b =&gt; c a b</code>)，所以不可能；一开始i选择2，得到<code>c a b a^b</code>同理以后不管怎么操作也是a和b都是偶数一起被抵消了。所以不要求连续的子段这在这种规则下是不能产生的。<br>最大连续子段异或和一定是可以被构造出来的，和假设中的第二个构造法类似，比如[l,r]之间的异或和，可以先产生[r+1,m]的所有异或和放到m+1的位置，那么下次只需要选i= l即可把r后面的所有数抵消。<br>如何快速求出最大连续子段异或和？这道题的范围要求在线性的复杂度内求出。可以先求出异或后缀和sum[i]，注意到[l,r]可以看成sum[l]^sum[r+1]（归零律）就是直接抵消了r后面的数所以对后缀和进行建01字典树，枚举l，找到一个最大的r即可，并且异或有交换律所以就算找到的r小于l也没事。<br>需要注意的是不一定要找一r有可能l后面的所有数要比找到的r要更小，所以最大值要考虑自己sum[l]本身.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">2</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="type">int</span> y = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][y]) u = nxt[u][y];</span><br><span class="line">        <span class="keyword">else</span> nxt[u][y] = ++cnt,u = nxt[u][y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="type">int</span> y = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][y^<span class="number">1</span>]) sum += (<span class="number">1</span>&lt;&lt;i),u = nxt[u][y^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> u = nxt[u][y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=cnt;++i) nxt[i][<span class="number">1</span>] = nxt[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],a[i] ^= a[i<span class="number">-1</span>],<span class="built_in">insert</span>(a[i]);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i) ans = <span class="built_in">max</span>(&#123;ans,<span class="built_in">find</span>(a[i]),a[i]&#125;);</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上最大连续异或和实际上也可以用dp。</p>]]></content>
      
      
      <categories>
          
          <category> 一些小算法和算法思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 01字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根号分治</title>
      <link href="/2024/02/09/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
      <url>/2024/02/09/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p>用来处理一些根号范围以内复杂度高（打表），根号范围以外复杂度低（枚举）的一种暴力思想，一般能做到$O(n\sqrt n)$的复杂度，大多数都是多组数据询问。</p><h4 id="P3396-哈希冲突"><a href="#P3396-哈希冲突" class="headerlink" title="P3396 哈希冲突"></a><a href="https://www.luogu.com.cn/problem/P3396">P3396 哈希冲突</a></h4><p>一个长度为n 的序列和m个操作，每次操作可以以下二选一：<br>1 询问下标模x后为y的所有数之和<br>2 修改第x个数<br>n≤150000，m≤150000，元素范围是[1,1000]的整数<br>暴力做法是直接枚举，比如模2后为1的有1,3,5,7…，模10后为1的有11,21,31,41,51…可以发现对于长度为n的，模x后为y的数大概有$\left \lfloor \frac{n}{x} \right \rfloor$个，当x越大那么这个数越小，所以模数越大的可以考虑直接暴力枚举而不会超时，那么问题在于如何处理模数小的询问，当模数小的时候因为余数的范围变小了所以考虑直接先打表预处理出所有的情况，令sum[i][j]表示n个数中下标模i后为j的所有的数的总和，那么可以在O(np)的复杂度内预处理出所有情况，其中p为指定的最大的模数，同时修改也很简单，单次修改的复杂度是O(p)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">        sum[i][j % i] += a[j];</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) sum[i][x % i] += y - a[x];</span><br><span class="line">a[x] = y;</span><br></pre></td></tr></table></figure><p>所以在模数小于p的情况下直接O(1)查询，模数大于p的情况下最坏大概是$O(\left \lfloor m\frac{n}{p} \right \rfloor )$计算，并且预处理和修改的最坏情况（全是修改）下复杂度都是O(np)，后两者的复杂度是较高的，那么由均值定理得当他们两个相等的时候总体的复杂度是最低的即$m\frac{n}{p} = n\frac{n}{p} = np$,得$p = \sqrt n$,此时是最小的,所以p大概取390左右。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">390</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line"><span class="type">int</span> sum[p+<span class="number">1</span>][p+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i)</span><br><span class="line">            sum[i][j % i] += a[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> cmd;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; cmd &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (cmd == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; p) <span class="keyword">for</span> (<span class="type">int</span> i = y; i &lt;= n; i += x) ans += a[i];</span><br><span class="line">        <span class="keyword">else</span> ans = sum[x][y];</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) sum[i][x % i] += y - a[x];</span><br><span class="line">        a[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Sum-of-Progression"><a href="#Sum-of-Progression" class="headerlink" title="Sum of Progression"></a><a href="https://www.luogu.com.cn/problem/CF1921F">Sum of Progression</a></h4><p>给你一个长度为 $n$ 的数列 $a$。有 $q$ 次询问，每次询问给出 $s,d,k$，你需要回答 $\displaystyle\sum_{i=1}^ka_{s+(i-1)d}\times i$ 的值。<br>$s,d,k\leq n\leq 10^5,q\leq 2\times 10^5,s+d(k-1)\leq n,|a_i|\leq 10^8$。<br>看出这是等差数列，可以发现d越大增长的越快p的取值与上一题的证明类似，都是对形如一次函数和反比例函数之和求最小值，这道题p大概可以取320。<br>预处理要比上一道要复杂些，这里用后缀和处理更简单一些。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">320</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q, s, d, k, a[N];</span><br><span class="line"><span class="type">int</span> sum[N + p][p + <span class="number">5</span>], f[N + p][p + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+p;i++) </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++) </span><br><span class="line">sum[i][j]=<span class="number">0</span>,f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">sum[j][i] = sum[j + i][i] + a[j],</span><br><span class="line">f[j][i] = f[j + i][i] + sum[j + i][i] + a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; d &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (d &lt;= p) &#123;</span><br><span class="line"><span class="type">int</span> last = s + d * k;</span><br><span class="line"><span class="keyword">if</span> (last &gt; n)cout &lt;&lt; f[s][d] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; f[s][d] - f[last][d] - sum[last][d]*k &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= s+d*(k<span class="number">-1</span>); i += d)</span><br><span class="line">ans += a[i] * cnt, cnt++;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根号分治只是一种思想，只要是对于一次循环内的复杂度呈单调增或单调减都可以用这种思想，并且不一定是在根号处划分枚举与打表的界限，具体怎么判断要对复杂度分析后才可以。</p>]]></content>
      
      
      <categories>
          
          <category> 一些小算法和算法思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 根号分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github个人网站开发</title>
      <link href="/2024/02/07/hexo-github%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
      <url>/2024/02/07/hexo-github%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>23年暑假学git的时候偶然发现github可以托管像hexo这种无后端的博客框架，参考了这个视频<a href="https://www.bilibili.com/video/BV1st411r7Sj">BV1st411r7Sj</a>自己搓了个博客。<br>有些东西长久不用就忘记了，写个文档记录一些常用的操作</p><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><p>像语雀这种存在防盗链机制的文章即使导出的是Markdown格式图片在博客上也是不能显示的，一种简单的方法是在语雀端插入图片的时候不要直接插入，这样图片是放在语雀图床里面的，可以放在别的图床比如<a href="https://sm.ms/home/">https://sm.ms/home/</a>等并将其用图床外链放到语雀写作端就没有问题因为图片并没有存在语雀图床里面。还有一种就是开超级会员获取token，这样就可以不用将语雀上的内容导出就可以在博客上显示。</p><h3 id="将博客托管至GitHub"><a href="#将博客托管至GitHub" class="headerlink" title="将博客托管至GitHub"></a>将博客托管至GitHub</h3><p>参考<a href="https://xtzyj.top/2023/08/21/0%E6%88%90%E6%9C%AC%E4%BD%BF%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%89%98%E7%AE%A1%E8%87%B3Github-Pages/#%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E8%87%B3GitHub">0成本使用Hexo框架搭建个人博客并托管至Github-Pages/#将博客托管至GitHub</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd xxxx.github.io</span><br><span class="line">git add --all</span><br><span class="line">git commit -m &quot;message&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于ubuntu</title>
      <link href="/2024/01/06/%E5%85%B3%E4%BA%8Eubuntu/"/>
      <url>/2024/01/06/%E5%85%B3%E4%BA%8Eubuntu/</url>
      
        <content type="html"><![CDATA[<p>之前打ICPC用的wf镜像，不适应ubuntu系统的各种操作，<del>其实队伍里面只有我不会。</del>本文记录一些日常使用ubuntu中遇到的一些问题，以后如果上相关的选修课也可以用用</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>一些软件给linux系统提供了好几种版本，比如X86,ARM,LoogArch、MIPS等，这四种版本的区别：<br>X86（或x86_64）： 适用于大多数个人计算机和服务器的标准桌面和服务器硬件，通常是Intel或AMD处理器。<br>ARM： 适用于基于ARM架构的设备，如某些嵌入式系统、智能手机、平板电脑等。<br>loongArch（龙芯架构）： 龙芯是中国的一个处理器架构，适用于支持龙芯架构的硬件。<br>MIPS： 适用于MIPS架构的硬件，这种架构在嵌入式系统和某些网络设备中较为常见。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看ubuntu系统的版本信息</span><br><span class="line">lsb_release -a</span><br><span class="line">查看硬件架构</span><br><span class="line">uname -m</span><br></pre></td></tr></table></figure><p>选了架构之后，下载的软件包又分为三种：<br>三个不同的包格式（.rpm、.deb、AppImage）在Linux中用于软件管理，它们有一些基本的区别：<br>.rpm（Red Hat Package Manager）： 主要用于基于Red Hat的发行版，如Fedora、openSUSE、CentOS等。这种包格式是通过Red Hat开发的，用于简化软件的安装、升级和卸载。<br>.deb（Debian Package）： 用于Debian及其衍生发行版，如Ubuntu。Debian包管理系统使用.deb格式，也是一种用于简化软件管理的包格式。<br>AppImage： 是一种独立的可执行软件包格式，不依赖于特定的包管理系统。AppImage封装了应用程序及其依赖项，可以在多个不同的Linux发行版上运行，而无需安装。这使得AppImage更具有可移植性。<br>关于.deb:<br>1.找到.deb文件所在的目录，打开终端<br>2.输入命令$ sudo dpkg -i xxx.deb<br>*如果出现依赖向错误，可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1、更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line"> </span><br><span class="line"># 2、fix解决依赖关系</span><br><span class="line">sudo apt-get -f install</span><br><span class="line"> </span><br><span class="line"># 3、再次安装xxx.deb</span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><h3 id="配置clion"><a href="#配置clion" class="headerlink" title="配置clion"></a>配置clion</h3><p>直接用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install clion --classic</span><br><span class="line">可以加上制定版本</span><br><span class="line">sudo snap install clion --channel=2021.1 --classic</span><br></pre></td></tr></table></figure><p>还要安装make，gcc，g++这些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make</span><br><span class="line">sudo apt install gcc</span><br><span class="line">sudo apt install g++</span><br></pre></td></tr></table></figure><p>然后就可以运行了<br>关于apt：<br><a href="https://www.runoob.com/linux/linux-comm-apt.html">Linux apt 命令</a></p><h3 id="扩展磁盘"><a href="#扩展磁盘" class="headerlink" title="扩展磁盘"></a>扩展磁盘</h3><p>扩展之前要先把快照删掉，扩展完之后还要在操作系统中设置才能真正的使用，不然是属于未分配的空间（扩展完最好先保存快照防止意外）。<br>方法也很简单，Ubuntu自带一个disk工具，打开之后就可以选择一个分区扩容，直接拉到最大即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ICPC杭州站打铁游记</title>
      <link href="/2023/12/11/2023ICPC%E6%9D%AD%E5%B7%9E%E7%AB%99%E6%89%93%E9%93%81%E6%B8%B8%E8%AE%B0/"/>
      <url>/2023/12/11/2023ICPC%E6%9D%AD%E5%B7%9E%E7%AB%99%E6%89%93%E9%93%81%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>由于杭州站题目将用作UCup Stage Hangzhou，博客会在24年2月之后再发题解<br>本身就是蒟蒻，本来也没想能有多好的成绩就看能不能拿到铜牌，结果不出意外的打铁了。只能说菜就多练确实技不如人，不过也正常没打过铁都不好意思说自己参加过ICPC。<br>day-1<br>周五下午出发，相比回家而言杭州很快就到了唯一难受的是东站离杭师大太远了乘地铁站了半天才到定的公寓，中途还发现因为比赛用的是Ubuntu系统win下的对拍程序还用不了，晚上临时整了个简陋的linux对拍器，手抄代码准备明天热身赛测试。<br>day0<br>早上七点多起床，去杭师大吃早饭结果精准踩雷吃到了逆天菜包，馅是豆腐+辣椒而且馅还少吃一半实在咽不下去就倒掉了，然后感觉自己又饿又想吐。走到叔同剧场签完到领了队服拍了合照，顺便吐槽了这队服颜色感觉像送外卖的(一黄一蓝的简称美团大战饿了么)。下午2.30开热身赛，开了两题看了眼排名感觉还可以过了铜牌线（当然很多大佬熟悉比赛环境了就懒得打所以排名会靠前一些）。自我感觉明天可以手速铜因为看很多人也是第一次参赛。测试完对拍代码然后润回公寓睡觉了。<br>回到公寓看见群里在发热身赛直播录像，然后发现自己正对着摄像头，有点炸裂明天准备直播丢脸了。<br>有意思的是我那天晚上做梦梦到了自己正式赛过了铜牌线。<br>day1<br>晚上做梦了明显睡得不是很舒服没怎么清醒。8点多过去存放行李然后等到九点左右进场。<br>没想到一打就打成牢大了。<br>开局zzc去敲缺省源，我和cfl去看题，随便翻了翻发现好像没有特别签到的题，去看榜单发现M题有人过了就三人一起看M，然后我和zzc想了个假做法先敲了上去后来cfl想了个正解，zzc就把原来的代码全删了敲这个，拿我造的数据拍了一下发现不对我看了下代码发现是除法没开double寄了，改了之后提交一发就过。此时已经过了40多分钟，有点小炸但还好排在中游。<br>再去看榜单发现D和L都有不少人做，决定先看D，发现是类似于找规律的构造题，找了半天没找出来，cfl去看L，我和zzc继续看D。想了好久cfl说L好像跟简单一些顺便讲了下思路，我们讨论了一下感觉是对的（实际上有个特判没找出来），留下我和zzc敲代码。结果zzc理解错了思路又因为这个思路不是我想出来的我也不知道加这个询问有没有问题就没去反驳他然后wa两次喜提两次罚时。<br>错了两次心态已经有点炸了，关键是是个图论的交互题对拍还不怎么好写，自己手搓的数据又没有问题，我想着自己对这道题没啥贡献了就去看D题让cfl和zzc接着找bug，再错了两次之后找出了bug加了个特判才过。<br>连吃四次罚时心态直接爆炸。然后一起集中看D。D题的规律看了半天也没看出来是什么，我决定把暴力枚举把所有正解都输出看看，然后想着有没有可能样例是误导，枚举出来所有的正解发现每个输入都对应有100多个合法构造。看着过的队伍越来越多彻底慌了，开始毫无章法的随便找数据看看有没有规律，找过序列值等于输入的，等于输入平方的，正负1交替循环的看了两小时愣是没找到规律，又开始直接看式子试试能不能推结论。也没弄出来，这下真的成饭桶了写不出来题把发下来的午饭全吃了，最后一路挂机到比赛结束带着胸牌题目板子溜出机房连晚饭餐券都不要了直接回公寓自闭了。<br>然后回到公寓我感觉不服躺床上断断续续的想了两三个小时结果真就爆出了一个合法构造。我直接把暴力枚举的第一个构造序列单独打出来找了一下规律，自己测试了一下大数据结果没错。这下真的投湖的心都有了。<br>研究了一下发现正负交替是必须的，然后只要1 -2循环就能满足题目的要求。有点无语，都感觉出来样例是误导了，样例输入2，3，4的时候序列第二个是-3，-10，-15，打表输入5的数据很明显不存在第二个是-26 开头的序列，为什么比赛就没想到直接把第一个合法构造拉出来试试。。。。。<br>然后明天回来的时候群里发了补题链接改了改D交了之后真就过了，彻底玉玉了。</p><p>这次比赛总给我一种三个人打出了1+1+1<1的操作，写出来D题后怎么也没想出来自己为啥当时就是没想到。正常发挥应该能在铜尾铁首的水平，三题就有手速铜，至少不会这么难看。结果配合寄自己状态也寄，队伍排名有点难看差点掉到400名。<br>银牌爷刷两三千题从打铁打到银牌，队伍里三个人加起来也没有两千题。只能多刷刷题好好准备明年网络赛省赛啥的，要是我400多题也能摸到铜牌估计真就成天赋怪了。<br>明年再战吧。</1的操作，写出来D题后怎么也没想出来自己为啥当时就是没想到。正常发挥应该能在铜尾铁首的水平，三题就有手速铜，至少不会这么难看。结果配合寄自己状态也寄，队伍排名有点难看差点掉到400名。<br></p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC2021 Nanjing R 签到+铜牌题</title>
      <link href="/2023/11/15/ICPC2021-Nanjing-R-%E7%AD%BE%E5%88%B0-%E9%93%9C%E7%89%8C%E9%A2%98/"/>
      <url>/2023/11/15/ICPC2021-Nanjing-R-%E7%AD%BE%E5%88%B0-%E9%93%9C%E7%89%8C%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>补题链接：<a href="https://codeforces.com/gym/103470">https://codeforces.com/gym/103470</a>或<a href="https://www.luogu.com.cn/contest/143839">https://www.luogu.com.cn/contest/143839</a><br><a name="bwVhK"></a></p><h2 id="A-Oops-It’s-Yesterday-Twice-More"><a href="#A-Oops-It’s-Yesterday-Twice-More" class="headerlink" title="A.Oops, It’s Yesterday Twice More"></a>A.Oops, It’s Yesterday Twice More</h2><p>n*m的矩阵里面每个格子都有一个袋鼠你可以通过在键盘上按下U、D、L、R按钮来控制袋鼠。袋鼠将根据您按下的按钮同时移动。具体而言，对于位于第i行和第j列的单元格，用（i，j）表示：</p><ol><li>按钮U：如果i &gt; 1，则它将移动到（i - 1，j）。否则，它将保持在相同的网格中。</li><li>按钮D：如果i &lt; n，则它将移动到（i + 1，j）。否则，它将保持在相同的网格中。</li><li>按钮L：如果j &gt; 1，则它将移动到（i，j - 1）。否则，它将保持在相同的网格中。</li><li>按钮R：如果j &lt; n，则它将移动到（i，j + 1）。否则，它将保持在相同的网格中。</li></ol><p>您需要构建一个仅由字符‘U’、‘D’、‘L’和‘R’组成的操作序列。应用该序列后，您必须确保每只袋鼠都聚集在特定的单元格（a，b）。操作序列的长度不能超过3(n - 1)。</p><p>签到题，想到可以在等于2(n-1)的步数将袋鼠全部聚集到四个角落中的任意一个角落，那么问题就转换成在n-1步数之内移到（a,b）点，只要贪心的选择到（a,b）点曼哈顿距离最小的那个角落就一定能保证在n-1步之内到达，可以假设最坏情况（中心点）来验证一下<br><a name="28e5daa8"></a></p><h2 id="M-Windblume-Festival"><a href="#M-Windblume-Festival" class="headerlink" title="M.Windblume Festival"></a>M.Windblume Festival</h2><p>给一个长度为n环形整数序列a,每次操作可以选择两个相邻的数，左边的数减去右边的数，删除右边的数，最后会剩下一个元素，要求最大化这个元素<br>有正有负或者有0的情况下一定无损，只需要对绝对值求和即可，如果全是正或者全是负数那么就要考虑将亏损降到最小，因为最后必定会剩下两个数，左边的数用于减去右边的数，对于全是正数而言，剩的一定是左边一个正数和右边一个负数，那么原本右边位置的数（设为k）就是亏损的数，要最小化亏损就需要右边原来的数最小，这样在最后就亏损了2<em>k;对于负数而言也是类似（其实正负并没有关系），找出绝对值最小的负数（k），亏损的就是2</em>abs（k））,注意特判n==1的情况<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>, min1 = <span class="number">1e18</span>, max1 = <span class="number">-1e18</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">bool</span> flagP = <span class="literal">false</span>, flag0 = <span class="literal">false</span>, flagN = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> (min1 &gt; a[i]) min1 = a[i];</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; a[i]) max1 = a[i];</span><br><span class="line">sum += <span class="built_in">abs</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>)flagP = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) flag0 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) flagN = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;min1&lt;&lt;&#x27; &#x27;&lt;&lt;min2&lt;&lt;&#x27; &#x27;&lt;&lt;max1&lt;&lt;&#x27; &#x27;&lt;&lt;max2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> cout&lt;&lt;a[<span class="number">1</span>]&lt;&lt;endl,<span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> ((flagN &amp;&amp; flagP) || flag0) &#123;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (flagP) &#123;</span><br><span class="line">cout &lt;&lt; sum - <span class="built_in">abs</span>(min1)*<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; sum - <span class="built_in">abs</span>(max1)*<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a name="GefcE"></a></p><h2 id="C-Klee-in-Solitary-Confinement"><a href="#C-Klee-in-Solitary-Confinement" class="headerlink" title="C.Klee in Solitary Confinement"></a>C.Klee in Solitary Confinement</h2><p>给定一个整数序列和一个可添加的数字，最多可以选择一个区间执行一次添加操作（可以不执行），求在执行或不执行操作的情况下，整个序列中众数的最大出现次数。<br>对于一个数a来说，他只能影响到a的个数以及a+k的个数，所以先记录下不执行操作情况下的最大众数，然后对于每个a+k，都需要找一个区间，对于一个区间+k那么原先的a的数量就减去一个，那么可以做一次从前往后的遍历，用一个数组cnt2记录下减去每一个位置上的数（a），再把a+k加上一，如果cnt2[a]变成了负数，那么就将它变成0，就相当于这前面的数都不进行+k的操作。其实有点像双指针<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 4000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], n, k, ans;</span><br><span class="line"><span class="type">int</span> cnt1[N], cnt2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">a[i] += <span class="number">2000000</span>;</span><br><span class="line">++cnt1[a[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">--cnt2[a[i]];</span><br><span class="line">++cnt2[a[i] + k];</span><br><span class="line">cnt2[a[i]] = <span class="built_in">max</span>(cnt2[a[i]], <span class="number">0</span>);</span><br><span class="line">ans = <span class="built_in">max</span>(ans, cnt2[a[i] + k] + cnt1[a[i] + k]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin&gt;&gt;T;</span></span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a name="ej67c"></a></p><h2 id="H-Crystalfly"><a href="#H-Crystalfly" class="headerlink" title="H.Crystalfly"></a>H.Crystalfly</h2><p>在一棵树状结构中，每个顶点上有一定的权值，从1号点开始移动，到达一个顶点时，加上该点的权值。但是当移动到一个顶点时，它的相邻节点，相邻顶点上的权值会在t时间（1≤t≤3）过后变成0。求最大的权值之和。<br>很明显的树形dp。由于t很小，可以想象一下如果走到一个节点他的相邻节点就变成0那么就变成了<a href="https://www.luogu.com.cn/problem/P1352">最大独立集问题</a>，可以发现当t≤2时其实是一样的，再考虑到只有一个节点p的儿子结点s1中t==3的节点才可以先去找另一个结点s2获取s2的权值并且不选他的儿子结点然后再返回来取s1结点和以它为根的子树的最大权值。<br>和最大独立集问题类似。<code>dp[x][1]</code> 记录子树 x 得到的最大值;dp[x][0]记录不取x的孩子所得到的最大值，<code>dp[x][0] += dp[y][1] - a[y]</code>，y属于x的儿子，<br>首先先求出<code>dp[x][1] = max(dp[x][1],dp[x][0]+a[y])</code>,然后若有一个儿子结点y的<code>t[y] = 3</code>,可以先走到另一个孩子节点y1去取再返回y取,这样就y1的孩子的权值就变成了0，即<code>dp[y1][0]</code>,这种情况下的值就变成了不取x节点的最大值加上取这个y这个点的权值加上<code>dp[y1][0]</code>再减去多算的公共部分（<code>dp[y1][1]-a[y1]</code>），即<br><code>dp[x][1]=max(dp[x][1],dp[x][0]+a[y]+dp[z][0]-(dp[z][1]-a[z]))</code><br>那么需要记录dp[z][0]-(dp[z][1]-a[z])的最大值，如果z==y那么需要用次大值进行比较<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, ans, dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N], t[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> par)</span> </span>&#123;</span><br><span class="line"><span class="comment">//dp[u][0] = a[u];</span></span><br><span class="line"><span class="comment">//if(t[u] == 2) dp[]</span></span><br><span class="line"><span class="comment">//int maxn11 = 0, maxn12 = 0, maxn21 = 0, maxn22 = 0;</span></span><br><span class="line">dp[u][<span class="number">0</span>] = a[u];</span><br><span class="line"><span class="type">int</span> pos1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> maxn1 = <span class="number">-1</span>, maxn2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v == par)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v, u);</span><br><span class="line">dp[u][<span class="number">0</span>] += dp[v][<span class="number">1</span>] - a[v];</span><br><span class="line"><span class="type">int</span> temp = dp[v][<span class="number">0</span>] - (dp[v][<span class="number">1</span>] - a[v]);</span><br><span class="line"><span class="keyword">if</span> (temp &gt; maxn1) maxn2 = maxn1, maxn1 = temp, pos1 = v;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maxn2 &lt; temp) maxn2 = temp;</span><br><span class="line">&#125;</span><br><span class="line">dp[u][<span class="number">1</span>] = dp[u][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v == par) <span class="keyword">continue</span>;</span><br><span class="line">dp[u][<span class="number">1</span>] = <span class="built_in">max</span>(dp[u][<span class="number">1</span>], dp[u][<span class="number">0</span>] + a[v]);</span><br><span class="line"><span class="keyword">if</span> (t[v] == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos1 ^ v)dp[u][<span class="number">1</span>] = <span class="built_in">max</span>(dp[u][<span class="number">1</span>], dp[u][<span class="number">0</span>] + a[v] + maxn1);</span><br><span class="line"><span class="keyword">else</span> dp[u][<span class="number">1</span>] = <span class="built_in">max</span>(dp[u][<span class="number">1</span>], dp[u][<span class="number">0</span>] + a[v] + maxn2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) edge[i].<span class="built_in">clear</span>(), dp[i][<span class="number">1</span>] = dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v), edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; dp[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a name="yHH03"></a></p><h2 id="D-Paimon-Sorting"><a href="#D-Paimon-Sorting" class="headerlink" title="D.Paimon Sorting"></a>D.Paimon Sorting</h2><p>给出一个排序算法（用伪代码表示）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序算法</span></span><br><span class="line"><span class="built_in">SORT</span>(A)</span><br><span class="line">  <span class="keyword">for</span> i from <span class="number">1</span> to n <span class="comment">// n 是序列 A 的元素个数</span></span><br><span class="line">    <span class="keyword">for</span> j from <span class="number">1</span> to n</span><br><span class="line">      <span class="keyword">if</span> a[i] &lt; a[j] <span class="comment">// a[i] 是序列 A 的第 i 个元素</span></span><br><span class="line">        Swap a[i] <span class="keyword">and</span> a[j]</span><br></pre></td></tr></table></figure></p><p>请你算出对于一个序列 $A=a_1,a_2,\cdots,a_n$ 的所有前缀 $A_k=a_1,a_2,\cdots,a_k$($1\le k\le n$)， $\operatorname{SORT}(A_k)$中的交换（Swap）操作将会被执行几次。</p><p>感觉比第四道好想一些。<br>因为程序都给你了，打表找规律就好了。<br>打表代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1003</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], b[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sort</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; ++i) b[i] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= x; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; b[j]) &#123;</span><br><span class="line"><span class="built_in">swap</span>(b[i], b[j]);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//cin &gt;&gt; n;</span></span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= n; ++i) cin &gt;&gt; a[i];</span></span><br><span class="line">n = <span class="built_in">random</span>(<span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) t = <span class="built_in">random</span>(<span class="number">1</span>,n),a[i] = t;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cout &lt;&lt; <span class="built_in">Sort</span>(i) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>规律倒不是很好找，具体来说：<br>设 maxn 为前 n−1 个数中的最大值<br>首先当 a[i] &lt; maxn , ans += 前 n−1 个数中, 比当前数小的数的个数<br>当 a[i] = maxn时，答案不变<br>当 a[i] &gt; maxn ans += 2 + maxn第二次出现后的数的个数<br>所以可以用树状数组等查询前面比当前数小的数的个数，ac代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-x))</span></span><br><span class="line"><span class="type">int</span> n&#123;&#125;;</span><br><span class="line"><span class="type">int</span> a[N]&#123;&#125;, tr[N]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = u; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line">bitset&lt;N&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">st.<span class="built_in">reset</span>();</span><br><span class="line">BIT bit;</span><br><span class="line">bit.n = n;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, cnt = <span class="number">0</span>, maxn;</span><br><span class="line">bit.<span class="built_in">add</span>(a[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">maxn = a[<span class="number">1</span>];</span><br><span class="line">st[a[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; maxn) &#123;</span><br><span class="line">maxn = a[i];</span><br><span class="line"><span class="comment">//            int k = !st[a[i]];</span></span><br><span class="line"><span class="comment">//            ans += 2 + st.count()-k;</span></span><br><span class="line">ans += <span class="number">2</span> + cnt;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] == maxn) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">cnt += flag;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += bit.<span class="built_in">query</span>(maxn) - bit.<span class="built_in">query</span>(a[i]);</span><br><span class="line">cnt += flag;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt; ans ;</span><br><span class="line"><span class="keyword">if</span> (!st[a[i]]) st[a[i]] = <span class="literal">true</span>, bit.<span class="built_in">add</span>(a[i], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="comment">// freopen(&quot;my.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hack:</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 2 1 3</span></span><br><span class="line"><span class="comment">stand:</span></span><br><span class="line"><span class="comment">0 2 2 3 7</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">8</span></span><br><span class="line"><span class="comment">3 3 1 7 8 3 6 1</span></span><br><span class="line"><span class="comment">stand:</span></span><br><span class="line"><span class="comment">0 0 1 5 7 9 11 15</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">4 6 6 4 2 7 3</span></span><br><span class="line"><span class="comment">stand</span></span><br><span class="line"><span class="comment">0 2 2 3 5 10 13</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">6 2 6 6 2 7 6</span></span><br><span class="line"><span class="comment">stand</span></span><br><span class="line"><span class="comment">0 1 1 1 2 7 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br>如果不重复那么规律还是比较好找的</p>]]></content>
      
      
      <categories>
          
          <category> ICPC区域赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 南京 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19thZJCPC</title>
      <link href="/2023/10/26/19thZJCPC/"/>
      <url>/2023/10/26/19thZJCPC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/103687">补题链接</a><br><a name="t28tw"></a></p><h2 id="B-JB-Loves-Comma"><a href="#B-JB-Loves-Comma" class="headerlink" title="B. JB Loves Comma"></a>B. JB Loves Comma</h2><p> 给定字符串 S，在每个 “cjb” 子串后面添加一个逗号 ,就一签到题没什么难度<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="comment">//#define N 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s ;</span><br><span class="line">cin &gt;&gt; s ;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; (<span class="type">int</span>)s.<span class="built_in">size</span>() ; i++) &#123;</span><br><span class="line">cout &lt;&lt; s[i] ;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">2</span> &amp;&amp; s.<span class="built_in">substr</span>(i - <span class="number">2</span>, <span class="number">3</span>) == <span class="string">&quot;cjb&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;,&quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a name="lIZp8"></a></p><h2 id="C-JB-Wants-to-Earn-Big-Money"><a href="#C-JB-Wants-to-Earn-Big-Money" class="headerlink" title="C. JB Wants to Earn Big Money"></a>C. JB Wants to Earn Big Money</h2><p> 给定 n 个人的预期价格和股票交易价格，统计参与交易的人数。每次读入判断一下就好了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, z, ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; z;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, t; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">ans += t &gt;= z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, t; i &lt;= m; ++i) &#123;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">ans += t &lt;= z;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a name="nhd2I"></a></p><h2 id="A-JB-Loves-Math"><a href="#A-JB-Loves-Math" class="headerlink" title="A. JB Loves Math"></a>A. JB Loves Math</h2><p>给定两个正整数 a, b，你需要选定一个正奇数 x 和一个正偶 数 y。 之后的每一步操作中，你可以将 a 增大 x 或者将 a 减小 y。 求把 a 变成 b 的最少操作次数。<br>稍微有点头疼的模拟题，要考虑一些细节<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="comment">//#define N 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="type">int</span> diff = <span class="built_in">abs</span>(a - b);</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line"><span class="keyword">return</span> cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl, <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line"><span class="keyword">if</span> (diff &amp; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl, <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> ((diff &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((diff &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl, <span class="built_in">void</span>();</span><br><span class="line">cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><a name="ZuvAL"></a></p><h2 id="L-Candy-Machine"><a href="#L-Candy-Machine" class="headerlink" title="L. Candy Machine"></a>L. Candy Machine</h2><p> 给定 N 个正整数，从中选择一个子集使得严格大于该集合平均数的数字个数尽可能多。  <br>注意选的是子集，所以选的和顺序无关，不难发现从小到大添加数据是最优的，感性理解一下这样能保证每次对于平均值不会增加太多导致不行。可以用反证法证明：<br>假设不按照这样添加更优，那么必存在a&gt;b，a和b按照a,b的顺序依次进入平均值是average2，原先按照b,a顺序进入时平均值为average1，显然有average1&lt;average2,那么当有：</p><script type="math/tex; mode=display">c\in[a,b],average1</script><p>时，显然原先的排序更优于假设的排序，与假设矛盾故从小到大添加数据是最优的。<br>那么从小到大添加数据后，可以发现存在一个最小元素，在他之后的元素都是满足条件的，由于存在单调性所以考虑二分优化，使用自带的upper_bound函数找到严格大于的前一位，总复杂度O(nlogn)可以通过1e6的规模</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N], sum[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="type">double</span> k = sum[i] / (<span class="type">double</span>)i;</span><br><span class="line">l = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + i, k) - a - <span class="number">1</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, i - l);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="M4MMq"></a></p><h2 id="G-Easy-Glide"><a href="#G-Easy-Glide" class="headerlink" title="G. Easy Glide"></a>G. Easy Glide</h2><p> 给定平面上 n 个滑行点以及起点 S 和终点 T。 行走速度为 V1，每次经过某个滑行点后可以按 V2 速度滑 行 3 秒。 求从 S 滑行到 T 所需的最少时间。  <br>显然可以建图，每个点之间连一条边，边权是时间，跑一遍最短路即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1003</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> walk, glid;</span><br><span class="line">PII gpos[N], s, t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> to;</span><br><span class="line">    <span class="type">double</span>  w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">edge</span>(<span class="type">int</span> a, <span class="type">double</span> b) &#123;</span><br><span class="line">        to = a;</span><br><span class="line">        w = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;edge&gt; edge[N];</span><br><span class="line"><span class="type">double</span> dist[N];</span><br><span class="line">bitset&lt;N&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: edge) i.<span class="built_in">clear</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(dist, dist + N + <span class="number">1</span>, <span class="number">1e9</span>);</span><br><span class="line">    dist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">double</span>, <span class="type">int</span>&gt;&gt;, greater&lt;&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> ver = heap.<span class="built_in">top</span>().second;</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: edge[ver]) &#123;</span><br><span class="line">            <span class="type">int</span> j = i.to;</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[ver] + i.w) &#123;</span><br><span class="line">                dist[j] = dist[ver] + i.w;</span><br><span class="line">                heap.<span class="built_in">emplace</span>(dist[j], j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getT</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> x2, <span class="type">int</span> y1, <span class="type">int</span> y2, <span class="type">bool</span> ok)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;&#x27;(&#x27;&lt;&lt;x1&lt;&lt;&#x27;,&#x27;&lt;&lt;y1&lt;&lt;&#x27;)&#x27;&lt;&lt;&#x27;(&#x27;&lt;&lt;x2&lt;&lt;&#x27;,&#x27;&lt;&lt;y2&lt;&lt;&#x27;)&#x27;&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">    <span class="type">double</span> res, d = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x1 - x2, <span class="number">2</span>) + <span class="built_in">pow</span>(y1 - y2, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        res = d / glid;</span><br><span class="line">        <span class="keyword">if</span> (res &gt; <span class="number">3</span>)</span><br><span class="line">            res = <span class="number">3</span> + (d - glid * <span class="number">3.0</span>) / walk;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = d / walk;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;d&lt;&lt;&#x27; &#x27;&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; gpos[i].fi &gt;&gt; gpos[i].se;</span><br><span class="line">    cin &gt;&gt; s.fi &gt;&gt; s.se &gt;&gt; t.fi &gt;&gt; t.se;</span><br><span class="line">    cin &gt;&gt; walk &gt;&gt; glid;</span><br><span class="line">    <span class="type">double</span> c = <span class="built_in">getT</span>(s.fi, t.fi, s.se, t.se, <span class="literal">false</span>);</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">emplace_back</span>(n + <span class="number">1</span>, c), edge[n + <span class="number">1</span>].<span class="built_in">emplace_back</span>(<span class="number">0</span>, c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        c = <span class="built_in">getT</span>(s.fi, gpos[i].fi, s.se, gpos[i].se, <span class="literal">false</span>);</span><br><span class="line">        edge[<span class="number">0</span>].<span class="built_in">emplace_back</span>(i, c), edge[i].<span class="built_in">emplace_back</span>(<span class="number">0</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        c = <span class="built_in">getT</span>(gpos[i].fi, t.fi, gpos[i].se, t.se, <span class="literal">true</span>);</span><br><span class="line">        edge[i].<span class="built_in">emplace_back</span>(n + <span class="number">1</span>, c), edge[n + <span class="number">1</span>].<span class="built_in">emplace_back</span>(i, c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            c = <span class="built_in">getT</span>(gpos[i].fi, gpos[j].fi, gpos[i].se, gpos[j].se, <span class="literal">true</span>);</span><br><span class="line">            edge[i].<span class="built_in">emplace_back</span>(j, c), edge[j].<span class="built_in">emplace_back</span>(i, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    for (int ver = 0; ver &lt;= n + 1; ++ver) &#123;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; ver &lt;&lt; &#x27;(&#x27; &lt;&lt; gpos[ver].fi &lt;&lt; &#x27;,&#x27; &lt;&lt; gpos[ver].se &lt;&lt; &#x27;)&#x27; &lt;&lt; &#x27;:&#x27; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//        for (auto i:edge[ver]) &#123;</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; i.to &lt;&lt; &#x27;(&#x27; &lt;&lt; gpos[i.to].fi &lt;&lt; &#x27;,&#x27; &lt;&lt; gpos[i.to].se &lt;&lt; &#x27;)&#x27; &lt;&lt; &#x27;:&#x27; &lt;&lt; i.w &lt;&lt; &#x27;;&#x27;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; dijkstra();</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span> , <span class="built_in">dijkstra</span>()) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    cin.tie(nullptr), cout.tie(nullptr);</span></span><br><span class="line"><span class="comment">//    ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>主要难在实现，感觉要比L题要容易想一些，需要注意的是最后一定要写<code>printf()</code>，不能直接写<code>cout</code>不加精度的控制，因为题目要求精度不低于1e-6，而cout默认是输出六位有效数字。</p><p><a name="Xp9xb"></a></p><h2 id="M-BpbBppbpBB"><a href="#M-BpbBppbpBB" class="headerlink" title="M. BpbBppbpBB"></a>M. BpbBppbpBB</h2><p> 给定使用两种印章无重叠可旋转地打印出的字符画，统计每 种印章的使用次数。<br>没想到正解…有空补<br><a name="zCyFc"></a></p><h2 id="I-Barbecue"><a href="#I-Barbecue" class="headerlink" title="I. Barbecue"></a>I. Barbecue</h2><p>给定一个长度为 n 的字符串 S，q 次询问，每次询问指定 S 的一个子串，两个人在该子串上进行博弈。 博弈双方轮流删去当前串开头或结尾的一个字符，碰到回文串的人输。 预测两人都按最优策略操作时最终谁会获胜。<br>没学过博弈，会了之后再补思路。Putata先手，Budada后手，手模一下可以发现最后的情况必定是形如ab,abab,ababab…这样的才能让此时的人不管是撕左边的还是右边的都会输（其实做题的时候只发现了ab这种情况才一定输，但最后结论推出来居然还是对了），所以可以发现和初始状态的长度的奇偶性有关。并且还要判断一下初始态是不是回文串，快速判断一个子串是否是回文串可以使用进制哈希，我用的是manacher（好像跑的比哈希还快一些）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLC</span> &#123;</span><br><span class="line"><span class="type">int</span> n, p[<span class="number">2</span> * N + <span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> t[N * <span class="number">2</span> + <span class="number">3</span>], s[N + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n = (<span class="type">int</span>) <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">t[++m] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t[++m] = s[i], t[++m] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; r) p[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> p[i] = <span class="built_in">min</span>(p[<span class="number">2</span> * mid - i], r - i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (i - p[i] &gt; <span class="number">0</span> &amp;&amp; i + p[i] &lt;= m &amp;&amp; t[i - p[i]] == t[i + p[i]])++p[i];</span><br><span class="line"><span class="keyword">if</span> (i + p[i] - <span class="number">1</span> &gt; r) mid = i, r = i + p[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; manacher&#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l, r, len;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">len = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> t = manacher.p[l + r];</span><br><span class="line"><span class="keyword">if</span> (t &gt;= len) <span class="keyword">return</span> cout &lt;&lt; <span class="string">&quot;Budada&quot;</span> &lt;&lt; endl, <span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span> (len &amp; <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;Putata&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Budada&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>, n;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; T &gt;&gt; (manacher.s + <span class="number">1</span>);</span><br><span class="line">manacher.<span class="built_in">manacher</span>();</span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <br>个人感觉这一年的中等偏简单题偏多但完全做对有些困难，而且因为疫情线上每队有三台电脑编辑器随便选，如果队友之间没有配合好或者没使用更好的编辑器作为辅助，容易出现一道题卡很久的情况</p>]]></content>
      
      
      <categories>
          
          <category> ICPC省赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浙江 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺省源</title>
      <link href="/2023/10/25/%E7%BC%BA%E7%9C%81%E6%BA%90/"/>
      <url>/2023/10/25/%E7%BC%BA%E7%9C%81%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define endl &#x27;\n&#x27;</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="comment">//#define N 1003</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> si(x) (int)(x.size())</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug cout&lt;&lt;<span class="string">&quot;*******\n&quot;</span>;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cout.<span class="built_in">precision</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; fixed;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin&gt;&gt;T;</span></span><br><span class="line"><span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCPC模板</title>
      <link href="/2023/10/25/XCPC%E6%A8%A1%E6%9D%BF/"/>
      <url>/2023/10/25/XCPC%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; par, h;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DSU</span><span class="params">(<span class="type">int</span> _n)</span> : n(_n + <span class="number">1</span>), par(_n + <span class="number">1</span>), h(_n + <span class="number">1</span>) &#123;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= _n; ++i)par[i] = i;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> par[x] != x ? par[x] = <span class="built_in">find</span>(par[x]) : par[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (h[x] == h[y]) &#123;</span><br><span class="line">            h[x]++;</span><br><span class="line">            par[y] = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> h[x] &lt; h[y] ? par[x] = y : par[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="built_in">dsu</span>(N);</span><br></pre></td></tr></table></figure><h2 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// p数组存放</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 11000007</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MLC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n&#123;&#125;, p[<span class="number">2</span> * N + <span class="number">2</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">char</span> t[N * <span class="number">2</span> + <span class="number">3</span>]&#123;&#125;, s[N + <span class="number">2</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = (<span class="type">int</span>) <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">        t[++m] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t[++m] = s[i], t[++m] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> mid = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; r) p[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> p[i] = <span class="built_in">min</span>(p[<span class="number">2</span> * mid - i], r - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (i - p[i] &gt; <span class="number">0</span> &amp;&amp; i + p[i] &lt;= m &amp;&amp; t[i - p[i]] == t[i + p[i]]) ++p[i];</span><br><span class="line">            <span class="keyword">if</span> (i + p[i] - <span class="number">1</span> &gt; r) mid = i, r = i + p[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; manacher&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个子串是不是回文串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkSubPalindrome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l, r, len;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">len = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> t = manacher.p[l + r];</span><br><span class="line"><span class="keyword">if</span> (t &gt;= len) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用来求字符串中的最长回文串的长度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getMaxPalindrome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans = <span class="built_in">max</span>(ans, p[i]);</span><br><span class="line">cout &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> lps[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> s[N], p[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; (s + <span class="number">1</span>) &gt;&gt; (p + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> n = (<span class="type">int</span>) <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = (<span class="type">int</span>) <span class="built_in">strlen</span>(p + <span class="number">1</span>);</span><br><span class="line">    p[m + <span class="number">1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = m + <span class="number">2</span>; i &lt;= n; ++i, ++j) p[j] = s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] ^ p[j + <span class="number">1</span>]) j = lps[j];</span><br><span class="line">        j += p[i] == p[j + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> ((lps[i] = j) == m) cout &lt;&lt; (i - <span class="number">2</span> * m) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) cout &lt;&lt; lps[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exkmp"><a href="#exkmp" class="headerlink" title="exkmp"></a>exkmp</h2><p>用于解决在线性复杂度的限制下统计s中每一位字符开始最多可以匹配多少位p中的字符，或者求一个字符串s和它任意后缀的最长公共前后缀的长度，与KMP算法的next数组的区别是，一个是到s[i]结束，一个是从字符s[i]开始。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 20000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,z[N*<span class="number">2</span>];</span><br><span class="line"><span class="type">char</span> s[N],p[N*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exkmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = (<span class="type">int</span>)<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m = (<span class="type">int</span>)<span class="built_in">strlen</span>(p+<span class="number">1</span>);</span><br><span class="line">    p[m+<span class="number">1</span>] = <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m+<span class="number">2</span>,j = <span class="number">1</span>;j&lt;=n;++i,++j) p[i] = s[j];</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i&lt;=n+m+<span class="number">1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r) z[i] = <span class="built_in">min</span>(z[i-l+<span class="number">1</span>],r-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(i+z[i]&lt;=n+m+<span class="number">1</span> &amp;&amp; p[z[i]+<span class="number">1</span>] == p[z[i] + i]) ++z[i];</span><br><span class="line">        <span class="keyword">if</span>(i + z[i] - <span class="number">1</span> &gt; r) l = i,r = i + z[i] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z[<span class="number">1</span>] = m;</span><br><span class="line">    <span class="type">int</span> Z = <span class="number">0</span>,P = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//for(int i = 0;i&lt;=m+n+1;++i)cout&lt;&lt;z[i]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=m;++i) z[i] = i*(z[i]+<span class="number">1</span>),Z ^= z[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m+<span class="number">2</span>;i&lt;=m+n+<span class="number">1</span>;++i) z[i] = (i - m - <span class="number">1</span>) * (z[i] + <span class="number">1</span>), P ^= z[i];</span><br><span class="line">    cout&lt;&lt;Z&lt;&lt;endl&lt;&lt;P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,s+<span class="number">1</span>,p+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exkmp</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>给定 $n$ 个模式串 $s_1, s_2, \dots, s_n$ 和 $q$ 次询问，每次询问给定一个文本串 $t_i$，请回答 $s_1 \sim s_n$ 中有多少个字符串 $s_j$ 满足 $t_i$ 是 $s_j$ 的<strong>前缀</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, nxt[N][<span class="number">62</span>], cnt;</span><br><span class="line"><span class="type">int</span> tot[N];</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">(<span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> x - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; x &lt;= <span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> x - <span class="string">&#x27;a&#x27;</span> + <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x - <span class="string">&#x27;0&#x27;</span> + <span class="number">52</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> s[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>) <span class="built_in">strlen</span>(s), now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; len; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">getNum</span>(s[i]);</span><br><span class="line">        <span class="keyword">if</span> (!nxt[now][x]) nxt[now][x] = ++cnt;</span><br><span class="line">        now = nxt[now][x];</span><br><span class="line">        ++tot[now];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">char</span> s[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = (<span class="type">int</span>) <span class="built_in">strlen</span>(s), now = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; len &amp;&amp; ok; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">getNum</span>(s[i]);</span><br><span class="line">        <span class="keyword">if</span> (!nxt[now][x]) ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> now = nxt[now][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ok) cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; tot[now] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">62</span>; ++j)</span><br><span class="line">            nxt[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= cnt; ++i) tot[i] = <span class="number">0</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; str, <span class="built_in">insert</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        cin &gt;&gt; str, <span class="built_in">find</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Floyd</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line">    <span class="type">int</span> dp[N][N]&#123;&#125;, n&#123;&#125;, m&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _n, <span class="type">int</span> _m)</span> </span>&#123;</span><br><span class="line">        n = _n, m = _m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= _n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= _n; ++j)</span><br><span class="line">                <span class="keyword">if</span> (i ^ j) dp[i][j] = INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i)</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w, dp[u][v] = dp[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; floyd&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="BIT"><a href="#BIT" class="headerlink" title="BIT"></a>BIT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) ((x) &amp; (-x))</span></span><br><span class="line"><span class="type">int</span> n &#123;&#125;, m &#123;&#125;;</span><br><span class="line"><span class="type">int</span> a[N] &#123;&#125;, tr[N] &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) tr[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = u; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) res += tr[i];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; bit&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间修改+单点查询</span></span><br><span class="line"><span class="comment">// for (int i = 1, t, pre = 0; i &lt;= n; ++i) cin &gt;&gt; t, bit.add(i, t - pre), pre = t;</span></span><br><span class="line"><span class="comment">// for (int i = 1, op, x, y, k; i &lt;= m; ++i) &#123;</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; op ;</span></span><br><span class="line"><span class="comment">// if (op == 1) &#123;</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span></span><br><span class="line"><span class="comment">// bit.add(x, k), bit.add(y + 1, -k);</span></span><br><span class="line"><span class="comment">// &#125; else cin &gt;&gt; x, cout &lt;&lt; bit.query(x) &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 单点修改+区间查询</span></span><br><span class="line"><span class="comment">// for (int i = 1, t; i &lt;= n; ++i) cin &gt;&gt; t, bit.add(i, t);</span></span><br><span class="line"><span class="comment">// for (int i = 1, op, x, y; i &lt;= m; ++i) &#123;</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line"><span class="comment">// if (op == 1)bit.add(x, y);</span></span><br><span class="line"><span class="comment">// else cout &lt;&lt; (bit.query(y) - bit.query(x - 1)) &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 1003</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SP</span> &#123;</span><br><span class="line">    <span class="type">int</span> n&#123;&#125;, m&#123;&#125;, s&#123;&#125;, t&#123;&#125;;</span><br><span class="line">    <span class="type">int</span> dist[N]&#123;&#125;, pre[N]&#123;&#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;   <span class="comment">// 边，a表示出点，b表示入点，w表示边的权重</span></span><br><span class="line">        <span class="type">int</span> a&#123;&#125;, b&#123;&#125;, w&#123;&#125;;</span><br><span class="line">    &#125; edges[M]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">                <span class="keyword">if</span> (dist[b] &gt; dist[a] + w) &#123;</span><br><span class="line">                    dist[b] = dist[a] + w;</span><br><span class="line">                    pre[b] = a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dist[t] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> dist[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printPath</span><span class="params">(<span class="type">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (last == s) <span class="keyword">return</span> cout &lt;&lt; s, <span class="built_in">void</span>();</span><br><span class="line">        <span class="built_in">printPath</span>(pre[last]);</span><br><span class="line">        cout &lt;&lt; last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sp&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SP</span> &#123;</span><br><span class="line"><span class="type">int</span> n&#123;&#125;, s&#123;&#125;, t&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line"><span class="type">int</span> to&#123;&#125;;</span><br><span class="line"><span class="type">int</span> w&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">to = a;</span><br><span class="line">w = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;Edge&gt; edge[N];</span><br><span class="line"><span class="type">int</span> dist[N]&#123;&#125;;</span><br><span class="line">bitset&lt;N&gt; st&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : edge) i.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">fill</span>(dist + <span class="number">1</span>, dist + n + <span class="number">1</span>, <span class="number">1e9</span>);</span><br><span class="line">dist[s] = <span class="number">0</span>;</span><br><span class="line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;&gt;&gt; heap;</span><br><span class="line">heap.<span class="built_in">emplace</span>(<span class="number">0</span>, s);</span><br><span class="line"><span class="keyword">while</span> (!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">auto</span> ver = heap.<span class="built_in">top</span>().second;</span><br><span class="line">heap.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">st[ver] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : edge[ver]) &#123;</span><br><span class="line"><span class="type">int</span> j = i.to;</span><br><span class="line"><span class="keyword">if</span> (dist[j] &gt; dist[ver] + i.w) &#123;</span><br><span class="line">dist[j] = dist[ver] + i.w;</span><br><span class="line">heap.<span class="built_in">emplace</span>(dist[j], j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dist[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;sp;</span><br><span class="line"><span class="comment">//从t点开始遍历，求出s-&gt;t的所有最短路径包含的边所构成的DAG</span></span><br><span class="line"><span class="comment">// bitset&lt;N&gt; s;</span></span><br><span class="line"><span class="comment">// vector&lt;int&gt; g[N];</span></span><br><span class="line"><span class="comment">// void build(int u) &#123;</span></span><br><span class="line"><span class="comment">//     if (s[u]) return;</span></span><br><span class="line"><span class="comment">//     for (auto i: sp.edge[u]) &#123;</span></span><br><span class="line"><span class="comment">//         int j = i.to;</span></span><br><span class="line"><span class="comment">//         if (sp.dist[u] == sp.dist[j] + i.w) g[j].push_back(u), s[u] = true, build(j);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LCA</span> &#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];</span><br><span class="line"><span class="type">int</span> n&#123;&#125;,  m&#123;&#125;, s&#123;&#125;, fa[N][(<span class="type">int</span>)<span class="built_in">log2</span>(N) + <span class="number">2</span>] &#123;&#125;, dist[N] &#123;&#125;, k = (<span class="type">int</span>)<span class="built_in">log2</span>(N) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> par)</span> </span>&#123;</span><br><span class="line">fa[u][<span class="number">0</span>] = par, dist[u] = dist[par] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">log2</span>(dist[u]); ++i) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : edge[u])</span><br><span class="line"><span class="keyword">if</span> (it ^ par) <span class="built_in">dfs</span>(it, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dist[x] &lt; dist[y])<span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line"><span class="keyword">if</span> (dist[x] - (<span class="number">1</span> &lt;&lt; i) &gt;= dist[y])x = fa[x][i];</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (fa[x][i]^fa[y][i])</span><br><span class="line">x = fa[x][i], y = fa[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getDist</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dist[x] + dist[y] - (dist[<span class="built_in">lca</span>(x, y)] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(n+m)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tarjan</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">    <span class="type">int</span> n&#123;&#125;, m&#123;&#125;, idx&#123;&#125;, cnt&#123;&#125;;</span><br><span class="line">    <span class="type">int</span> dfn[N]&#123;&#125;, low[N]&#123;&#125;, bel[N]&#123;&#125;;</span><br><span class="line">    bitset&lt;N&gt; ins&#123;&#125;;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; scc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        dfn[u] = low[u] = ++idx;</span><br><span class="line">        ins[u] = <span class="literal">true</span>;</span><br><span class="line">        stk.<span class="built_in">push</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: e[u]) &#123;</span><br><span class="line"><span class="comment">//            if (!dfn[v]) &#123;</span></span><br><span class="line"><span class="comment">//                dfs(v);</span></span><br><span class="line"><span class="comment">//                low[u] = min(low[u], low[v]);</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                if (ins[v]) low[u] = min(low[u], dfn[v]);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">if</span> (!dfn[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (ins[v]) low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> v = stk.<span class="built_in">top</span>();</span><br><span class="line">                c.<span class="built_in">push_back</span>(v);</span><br><span class="line">                ins[v] = <span class="literal">false</span>;</span><br><span class="line">                bel[v] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span> (v == u) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            scc.<span class="built_in">push_back</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Tarjan tarjan;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    tarjan.n = n, tarjan.m = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        tarjan.e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!tarjan.dfn[i]) tarjan.<span class="built_in">dfs</span>(i);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it: tarjan.scc)</span><br><span class="line">        ans += it.<span class="built_in">size</span>() &gt; <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kosaraju"><a href="#Kosaraju" class="headerlink" title="Kosaraju"></a>Kosaraju</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Kosaraju</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; e[N],erev[N],out,c;</span><br><span class="line">    <span class="type">int</span> n&#123;&#125;, m&#123;&#125;;</span><br><span class="line">    bitset&lt;N&gt; vis&#123;&#125;;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; scc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v: e[u])</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) <span class="built_in">dfs</span>(v);</span><br><span class="line">        out.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:erev[u])</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]) <span class="built_in">dfs2</span>(v);</span><br><span class="line">        c.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">kosaraju</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">        <span class="built_in">reverse</span>(out.<span class="built_in">begin</span>(),out.<span class="built_in">end</span>());</span><br><span class="line">        vis.<span class="built_in">reset</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u:out)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[u])&#123;</span><br><span class="line">                c.<span class="built_in">clear</span>();</span><br><span class="line">                <span class="built_in">dfs2</span>(u);</span><br><span class="line">                scc.<span class="built_in">push_back</span>(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Kosaraju scc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    scc.n = n, scc.m = m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        scc.e[u].<span class="built_in">push_back</span>(v),scc.erev[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    scc.<span class="built_in">kosaraju</span>();</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it: scc.scc)</span><br><span class="line">        ans += it.<span class="built_in">size</span>() &gt; <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[N], stTable[N][<span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) stTable[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="type">int</span> p = (<span class="type">int</span>) (<span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; i); ++j) &#123;</span><br><span class="line">            stTable[j][i] = <span class="built_in">max</span>(stTable[j][i - <span class="number">1</span>], stTable[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> p = (<span class="type">int</span>) (<span class="built_in">log</span>(len) / <span class="built_in">log</span>(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(stTable[l][p], stTable[r - (<span class="number">1</span> &lt;&lt; p) + <span class="number">1</span>][p]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">query</span>(l, r) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qpow</span><span class="params">(<span class="type">long</span> a1, <span class="type">long</span> b1, <span class="type">long</span> p1)</span> </span>&#123;</span><br><span class="line"><span class="type">long</span> base = a1;</span><br><span class="line"><span class="keyword">while</span> (b1) &#123;</span><br><span class="line"><span class="keyword">if</span> (b1 &amp; <span class="number">1</span>)</span><br><span class="line">ans *= base;</span><br><span class="line">ans %= p1;</span><br><span class="line">base *= base;</span><br><span class="line">base %= p1;</span><br><span class="line">b1 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans %= p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>基于DFS的拓扑排序<br>递归有一个特点，就是输出的顺序是倒序，所以如果要正序输出则需要将它先存放进栈里面再输出。并且DFS也可以按照字典序输出所有的拓扑排序。poj 1270，P608</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> head[N],e[N],ne[N],idx;</span><br><span class="line"><span class="type">int</span> p[N],q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">//链式前向星</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=b,ne[idx]=head[a],head[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将入度为0的点先全部入队进行bfs</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!p[i])</span><br><span class="line">            q[tt++]=i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh&lt;tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k=q[hh++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[k];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];</span><br><span class="line">            <span class="comment">//去除入度为0的点后将度为0的点插入队列</span></span><br><span class="line">            <span class="keyword">if</span>(--p[j]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q[tt++]=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(tt==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            cout&lt;&lt;q[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;  cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">        p[b]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">topsort</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><p><a href="https://www.luogu.com.cn/problem/P2756">模板：P2756 飞行员配对方案问题</a><br>建议是直接全写在一个结构体里面，因为二分图往往要建边，边数不对就容易re，结构体可以在初始化的时候就申请所需要的空间并且不会浪费，注意与正常的模板相比初始化要改成-1，因为迭代的时候有时是从下标为0开始的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> wr &#123;&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NTR</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vis, st;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; edge;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NTR</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">n</span>(n), <span class="built_in">vis</span>(m), <span class="built_in">st</span>(m), <span class="built_in">edge</span>(n) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; edge[l].<span class="built_in">push_back</span>(r); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">any_of</span>(edge[u].<span class="built_in">begin</span>(), edge[u].<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[v]++ == <span class="number">0</span> &amp;&amp; (vis[v] == <span class="number">-1</span> || <span class="built_in">find</span>(vis[v]))) &#123;</span><br><span class="line">                vis[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">match</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">fill</span>(st.<span class="built_in">begin</span>(), st.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">find</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="comment">//申请的时候要注意下标是从0开始还是1开始，如果是1开始那么点数还要加1</span></span><br><span class="line">    <span class="function">NTR <span class="title">ntr</span><span class="params">(n + <span class="number">1</span>, m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a, b;;) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">-1</span> &amp;&amp; b == <span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        ntr.<span class="built_in">add</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(ntr.<span class="built_in">match</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (ntr.vis[i] != <span class="number">-1</span>) <span class="built_in">write</span>(ntr.vis[i], <span class="string">&#x27; &#x27;</span>), <span class="built_in">write</span>(i, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100000008</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EulerSieve</span>&#123;</span><br><span class="line">    bitset&lt;N+5&gt; isprime;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Euler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isprime[i]) prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; prime.<span class="built_in">size</span>() &amp;&amp; i * prime[j] &lt;= N; ++j) &#123;</span><br><span class="line">                isprime[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sieve;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,q,t;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    sieve.<span class="built_in">Euler</span>();</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        cin&gt;&gt;t;</span><br><span class="line">        cout&lt;&lt;sieve.prime[t<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cin&gt;&gt;T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="素数逆元"><a href="#素数逆元" class="headerlink" title="素数逆元"></a>素数逆元</h2><p>模运算下除以一个整数，就相当于乘以这个整数的乘法逆元<br>因为$ax\equiv 1(mod\ b)$<br>费马小定理得$ax\equiv a^{b-1}(mod\ b)$<br>所以$x\equiv a^{b-2}(mod\ b)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">modularInverse</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">  a = (a % p + p) % p;</span><br><span class="line">  <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = (a * ans) % p;</span><br><span class="line">    a = (a * a) % p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中p必须是质数</p><h2 id="欧拉函数-简化剩余系"><a href="#欧拉函数-简化剩余系" class="headerlink" title="欧拉函数/简化剩余系"></a>欧拉函数/简化剩余系</h2><p>欧拉函数：把对模m的简化剩余系的元素个数称为m的欧拉函数，记为Φ(m).<br>容斥原理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> phin = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">2</span>;d*d&lt;=n;++d)</span><br><span class="line"><span class="keyword">if</span>(n%d == <span class="number">0</span>)&#123;</span><br><span class="line">phin = phin/d*(d<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(n%d == <span class="number">0</span>) n/=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n!=<span class="number">1</span>) phin = phin / n *(n<span class="number">-1</span>);</span><br><span class="line">cout&lt;&lt;phin&lt;&lt;endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回有序数组（下标从1到n）中小于x的元素的个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = num + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; x) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这种写法是将l和r考虑为找分界线的作用，在l的右边</span></span><br><span class="line"><span class="comment">//都是不满足条件的，r的左边都是满足条件的。最后的</span></span><br><span class="line"><span class="comment">//情况是分界线卡在l和r的中间，注意l和r的定义，所以</span></span><br><span class="line"><span class="comment">//l和r的初始化必须要这样设置</span></span><br><span class="line"><span class="comment">//lowerbound版</span></span><br><span class="line"><span class="comment">//后继</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_search1</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;<span class="comment">//left + ((right - left) &gt;&gt; 1)（1）</span></span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt;= x)</span><br><span class="line">right = mid;<span class="comment">//（2）</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">left = mid + <span class="number">1</span>;<span class="comment">//（3）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">//（4）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前驱</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_search2</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;<span class="comment">//mid = left + ((right - left + 1) &gt;&gt; 1)（1）</span></span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt;= x)</span><br><span class="line">left = mid;<span class="comment">//（2）</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">right = mid - <span class="number">1</span>;<span class="comment">//（3）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">//（4）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二分答案</span></span><br><span class="line"><span class="comment">//后继</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_search1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">check1</span>()) &#123;<span class="comment">//left&lt;right</span></span><br><span class="line"><span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;<span class="comment">//left + ((right - left) &gt;&gt; 1)（1）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check2</span>(mid))</span><br><span class="line">right = mid;<span class="comment">//（2）</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">left = mid + <span class="number">1</span>;<span class="comment">//（3）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">//（4）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前驱</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bin_search2</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">check1</span>()) &#123;<span class="comment">//left&lt;right</span></span><br><span class="line"><span class="type">int</span> mid = left + right+<span class="number">1</span> &gt;&gt; <span class="number">1</span>;<span class="comment">//mid = left + ((right - left + 1) &gt;&gt; 1)（1）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check2</span>(mid))</span><br><span class="line">left = mid;<span class="comment">//（2）</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">right = mid - <span class="number">1</span>;<span class="comment">//（3）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">//（4）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h2><p>一个字符串，这个字符串的首尾是连在一起的，要求寻找一个位置，以该位置为起点的字符串的字典序在所有的字符串中中最小，复杂度为线性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[N*<span class="number">2</span> + <span class="number">2</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i)<span class="built_in">read</span>(s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i)s[i+n] = s[i];</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>,j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n&amp;&amp;j&lt;=n)&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s[i+k] == s[j+k]) ++k;</span><br><span class="line"><span class="keyword">if</span>(s[i+k]&gt;s[j+k])i+=k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> j += k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j)++j;</span><br><span class="line"><span class="keyword">if</span>(i&gt;j)<span class="built_in">swap</span>(i,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l = i;l&lt;n+i;++l)<span class="built_in">write</span>(s[l],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-n-求-1-n-的素数逆元"><a href="#O-n-求-1-n-的素数逆元" class="headerlink" title="O(n)求[1,n]的素数逆元"></a>O(n)求[1,n]的素数逆元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) inv[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> inv[i] = (mod - mod/i)*inv[mod%i]%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Wv0Cx"></a></p><h2 id="01Trie"><a href="#01Trie" class="headerlink" title="01Trie"></a>01Trie</h2><p><a href="https://z01prime.github.io/2024/02/13/01%E5%AD%97%E5%85%B8%E6%A0%91/">https://z01prime.github.io/2024/02/13/01%E5%AD%97%E5%85%B8%E6%A0%91/</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, a[N];</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">2</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="type">int</span> y = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(nxt[u][y]) u = nxt[u][y];</span><br><span class="line"><span class="keyword">else</span> nxt[u][y] = ++cnt,u = nxt[u][y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> u = <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">8</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line"><span class="type">int</span> y = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(nxt[u][y^<span class="number">1</span>]) sum += (<span class="number">1</span>&lt;&lt;i),u = nxt[u][y^<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> u = nxt[u][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=cnt;++i) nxt[i][<span class="number">1</span>] = nxt[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i) cin&gt;&gt;a[i],a[i] ^= a[i<span class="number">-1</span>],<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;++i) ans = <span class="built_in">max</span>(&#123;ans,<span class="built_in">find</span>(a[i]),a[i]&#125;);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trick</title>
      <link href="/2023/10/05/trick/"/>
      <url>/2023/10/05/trick/</url>
      
        <content type="html"><![CDATA[<p>本文用来记录一些做题时看到的小技巧以及踩过的坑<br><a name="s6d6l"></a></p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p><a name="xaLOm"></a></p><h2 id="bool可以直接作为参数传递："><a href="#bool可以直接作为参数传递：" class="headerlink" title="bool可以直接作为参数传递："></a>bool可以直接作为参数传递：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> m,<span class="type">int</span> n,<span class="type">int</span> next)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(next&gt;=<span class="number">8</span>)&#123;</span><br><span class="line">s[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i+m][j+n]==k[next]) </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(i+m,j+n,m,n,next+<span class="number">1</span>))&#123;</span><br><span class="line">    s[i][j]=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br></pre></td></tr></table></figure><p><a name="Ccyul"></a></p><h2 id="清除缓冲区"><a href="#清除缓冲区" class="headerlink" title="清除缓冲区"></a>清除缓冲区</h2><p>printf(“字符串”);后面加fflush(stdout)；cout使用endl。<br><a name="hSZJf"></a></p><h2 id="bool类型可以用bitset代替"><a href="#bool类型可以用bitset代替" class="headerlink" title="bool类型可以用bitset代替"></a>bool类型可以用bitset代替</h2><p><a href="https://blog.nowcoder.net/n/45218f11e93842788069886a6d097484?from=nowcoder_improve">C++ bitset用法_牛客博客</a><br><a name="U9Zy5"></a></p><h2 id="递归可以实现倒序"><a href="#递归可以实现倒序" class="headerlink" title="递归可以实现倒序"></a>递归可以实现倒序</h2><p>十进制转二进制输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    r = num%<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">2</span>) <span class="built_in">toBin</span>(num/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r) cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用递归解决了倒取余数的问题而递归条件是num&gt;=2而不是0可以解决了判断num为1时不需要输出0的情况<br><a name="cblnK"></a></p><h2 id="取字符串首尾："><a href="#取字符串首尾：" class="headerlink" title="取字符串首尾："></a>取字符串首尾：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line"><span class="keyword">while</span>(s[i] != <span class="number">0</span>) ++i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,s[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[i<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><p>现在复习回来看到发现这个好像没什么用…<br>2023/10/05<br><a name="rsGEE"></a></p><h2 id="while-cin-gt-gt-a-："><a href="#while-cin-gt-gt-a-：" class="headerlink" title="while(cin&gt;&gt;a)："></a>while(cin&gt;&gt;a)：</h2><p>重载操作符的返回值：由cin&gt;&gt;后续参数类型决定，其返回值类型为istream&amp;类型，大多数情况下其返回值为cin本身（非0值），只有当遇到EOF输入时，返回值为0。</p><p><a name="oTzHq"></a></p><h2 id="取余："><a href="#取余：" class="headerlink" title="取余："></a>取余：</h2><p>1、取余是为了防止溢出，<br>2、但是在取了余数之后，有可能成为负数，<br>例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fib[i] = fib[i - <span class="number">1</span>] * <span class="number">2</span> - fib[i - k - <span class="number">1</span>];</span><br><span class="line">fib[i] %= m;</span><br></pre></td></tr></table></figure><br>所以要<code>(fib[n] + m) % m</code><br>3、<code>(a *= b)%=mod;</code>&lt;-&gt;<code>a *= b;a %= mod;</code><br><a name="gcqwo"></a></p><h2 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h2><p>c++实现多行输出<br>c++11标准规定了一个原始字符串： raw string literal<br>以   R”(  开头， )” 结束，是可以跨越多行的字符串字面值，转义字符如 \t\n 在raw string literal中是普通的文本，而不再是转义字符，<br>如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">R&quot;(                ********</span></span><br><span class="line"><span class="string">               ************</span></span><br><span class="line"><span class="string">               ####....#.</span></span><br><span class="line"><span class="string">             #..###.....##....</span></span><br><span class="line"><span class="string">             ###.......######              ###            ###</span></span><br><span class="line"><span class="string">                ...........               #...#          #...#</span></span><br><span class="line"><span class="string">               ##*#######                 #.#.#          #.#.#</span></span><br><span class="line"><span class="string">            ####*******######             #.#.#          #.#.#</span></span><br><span class="line"><span class="string">           ...#***.****.*###....          #...#          #...#</span></span><br><span class="line"><span class="string">           ....**********##.....           ###            ###</span></span><br><span class="line"><span class="string">           ....****    *****....</span></span><br><span class="line"><span class="string">             ####        ####</span></span><br><span class="line"><span class="string">           ######        ######</span></span><br><span class="line"><span class="string">##############################################################</span></span><br><span class="line"><span class="string">#...#......#.##...#......#.##...#......#.##------------------#</span></span><br><span class="line"><span class="string">###########################################------------------#</span></span><br><span class="line"><span class="string">#..#....#....##..#....#....##..#....#....#####################</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.....#......##.....#......##.....#......#    #----------#</span></span><br><span class="line"><span class="string">##########################################    #----------#</span></span><br><span class="line"><span class="string">#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#</span></span><br><span class="line"><span class="string">##########################################    ############ )&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>运行结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">                ********</span><br><span class="line">               ************</span><br><span class="line">               ####....#.</span><br><span class="line">             #..###.....##....</span><br><span class="line">             ###.......######              ###            ###</span><br><span class="line">                ...........               #...#          #...#</span><br><span class="line">               ##*#######                 #.#.#          #.#.#</span><br><span class="line">            ####*******######             #.#.#          #.#.#</span><br><span class="line">           ...#***.****.*###....          #...#          #...#</span><br><span class="line">           ....**********##.....           ###            ###</span><br><span class="line">           ....****    *****....</span><br><span class="line">             ####        ####</span><br><span class="line">           ######        ######</span><br><span class="line">##############################################################</span><br><span class="line">#...#......#.##...#......#.##...#......#.##------------------#</span><br><span class="line">###########################################------------------#</span><br><span class="line">#..#....#....##..#....#....##..#....#....#####################</span><br><span class="line">##########################################    #----------#</span><br><span class="line">#.....#......##.....#......##.....#......#    #----------#</span><br><span class="line">##########################################    #----------#</span><br><span class="line">#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#</span><br><span class="line">##########################################    ############</span><br></pre></td></tr></table></figure><br><a name="NYtqG"></a></p><h2 id="基于范围的-for-循环："><a href="#基于范围的-for-循环：" class="headerlink" title="基于范围的 for 循环："></a>基于范围的 for 循环：</h2><p>在 C++11 及更高版本中推荐的方法是迭代 a 的字符 std::string 使用基于范围的 for 循环。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string dq2 = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> &amp;c : dq2) &#123;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">使用引用可以节省复制字符串所需要的时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意在使用stl容器时定义了容器为string类型则不能使用char类型引用，会出现[错误] invalid initialization of reference of 类型 ‘char&amp;’ 从 表达式 of type ‘std::__cxx11::basic_string<char>‘<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">deque&lt;string&gt; dq1, dq2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dq1.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (string &amp;c : dq1) &#123;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果使用char &amp;，则会有</span></span><br><span class="line"><span class="comment">//nvalid initialization of reference of类型 &#x27;char&amp;&#x27; 从 表达式 of type &#x27;std::__cxx11::basic_string&lt;char&gt;&#x27;的错误提示</span></span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> v[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; i : v)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(isBoundary[temp.first+i[<span class="number">0</span>]][temp.second+i[<span class="number">1</span>]]||isDraw[temp.first+i[<span class="number">0</span>]][temp.second+i[<span class="number">1</span>]]))&#123;</span><br><span class="line">        isDraw[temp.first+i[<span class="number">0</span>]][temp.second+i[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">emplace</span>(temp.first+i[<span class="number">0</span>],temp.second+i[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>除此之外，像<code>for (auto cur: &#123;4, 2, 1&#125;)</code>这样的也是合法的 </char></p><p><a name="SZmnB"></a></p><h2 id="加快cin-cout的方法"><a href="#加快cin-cout的方法" class="headerlink" title="加快cin cout的方法"></a>加快cin cout的方法</h2><p>对于大输入输出可以快2-3倍<br>注意不要和printf，scanf等C语言的输出输入函数混用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解除与C语言的绑定，加快cincout执行速度</span></span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><br><a name="UB8Z5"></a></p><h2 id="获取int最大值："><a href="#获取int最大值：" class="headerlink" title="获取int最大值："></a>获取int最大值：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans = (<span class="type">unsigned</span>)(<span class="number">-1</span>) &gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><a name="g5wdI"></a></p><h2 id="使用auto关键字代替冗长的定义如："><a href="#使用auto关键字代替冗长的定义如：" class="headerlink" title="使用auto关键字代替冗长的定义如："></a>使用auto关键字代替冗长的定义如：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; l;</span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = l.<span class="built_in">begin</span>(); p != l.<span class="built_in">end</span>(); p++)<span class="comment">//auto == list&lt;int&gt; ::iterator</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="EEXqD"></a></p><h2 id="read快读"><a href="#read快读" class="headerlink" title="read快读"></a>read快读</h2><p>留坑待填<br><a href="https://blog.csdn.net/tkzlfg/article/details/110288548#:~:text=%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%9A%20inline%20void%20read%28unsigned%20long%20long%20%26a%29%7B%20a%3D0%3B,while%28%28c%3Dgetchar%28%29%29%3C48%29%3B%20do%20a%3D%2A10%2B%28c%5E48%29%3B%20while%28%28c%3Dgetchar%28%29%29%3E47%29%3B%20%7D%20%E8%BF%99%E7%A7%8D%E5%8A%9E%E6%B3%95%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%E4%B8%8D%E5%A4%A7%E4%BA%8E%20264%20%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0%E3%80%82">C/C++中最快、最简洁的read()快读(卡常数)方法</a><br><a href="https://www.cnblogs.com/lingyunvoid/p/15204568.html">https://www.cnblogs.com/lingyunvoid/p/15204568.html</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wr &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">        T a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)) ch = (<span class="type">char</span>) <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            b = <span class="number">-1</span>;</span><br><span class="line">            ch = (<span class="type">char</span>) <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            a = ((T) a &lt;&lt; <span class="number">3</span>) + ((T) a &lt;&lt; <span class="number">1</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            ch = (<span class="type">char</span>) <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        x = a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x, <span class="type">char</span> c = <span class="string">&#x27;\0&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            x = -x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">&#x27;\0&#x27;</span>) <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wr;</span><br></pre></td></tr></table></figure><br><a name="ECP1B"></a></p><h2 id="scanf可以加上一些参数使得读入的时候能够读取固定长度，如“-1d”"><a href="#scanf可以加上一些参数使得读入的时候能够读取固定长度，如“-1d”" class="headerlink" title="scanf可以加上一些参数使得读入的时候能够读取固定长度，如“%1d”"></a>scanf可以加上一些参数使得读入的时候能够读取固定长度，如“%1d”</h2><p><a name="xNt0C"></a></p><h2 id="输入预处理（二分插入排序）"><a href="#输入预处理（二分插入排序）" class="headerlink" title="输入预处理（二分插入排序）"></a>输入预处理（二分插入排序）</h2><p><a name="ruXtB"></a></p><h2 id="vectora-a-insert-upper-bound-a-begin-a-end-x-x-二分插入保证单调性"><a href="#vectora-a-insert-upper-bound-a-begin-a-end-x-x-二分插入保证单调性" class="headerlink" title="vectora;a.insert(upper_bound(a.begin(),a.end(),x),x);//二分插入保证单调性"></a>vector<int>a;<br>a.insert(upper_bound(a.begin(),a.end(),x),x);//二分插入保证单调性</int></h2><p><a name="OGa85"></a></p><h2 id="关于断环为链的思想"><a href="#关于断环为链的思想" class="headerlink" title="关于断环为链的思想"></a>关于断环为链的思想</h2><p>有时题目会要求让你处理一个环，也就是一个环形链表，但是比赛没有时间手搓链表，可以把环断开成为一条链，这样可以方便处理对于每一个k的情况。说通俗点就是在n后面再接上1—(n-1)的值，所以数组要开双倍长度（或者说长度是2n-1）。<br>如<a href="https://www.luogu.com.cn/problem/P2629">P2629 好消息，坏消息</a>，这道题就是要开双倍的空间存储消息的好坏度<br><a name="u17vX"></a></p><h2 id="复杂的判断不建议使用-代替！表示非运算"><a href="#复杂的判断不建议使用-代替！表示非运算" class="headerlink" title="复杂的判断不建议使用~代替！表示非运算"></a>复杂的判断不建议使用~代替！表示非运算</h2><p>比如这种情况：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!(isBoundary[x][y]||isDraw[x][y])</span><br><span class="line">~(isBoundary[x][y]||isDraw[x][y])</span><br></pre></td></tr></table></figure><br>这两个不是等价的<br>主要还是-1的情况，负数在C语言中是以补码的形式存在，-1按位取反之后就是0了<br>2023/07/01<br><a name="Z7BOY"></a></p><h2 id="max函数，min函数可以同时比较两个及以上的数"><a href="#max函数，min函数可以同时比较两个及以上的数" class="headerlink" title="max函数，min函数可以同时比较两个及以上的数"></a>max函数，min函数可以同时比较两个及以上的数</h2><p><code>max(&#123;x,y,z&#125;)</code><br><a name="qrHPA"></a></p><h2 id="用字符表示的0和1可以用异或一个1来反转"><a href="#用字符表示的0和1可以用异或一个1来反转" class="headerlink" title="用字符表示的0和1可以用异或一个1来反转"></a>用字符表示的0和1可以用异或一个1来反转</h2><p><code>s[i] ^= 1;</code><br><a name="dwCRP"></a></p><h2 id="树的叶子结点可以用出度为1来判断"><a href="#树的叶子结点可以用出度为1来判断" class="headerlink" title="树的叶子结点可以用出度为1来判断"></a>树的叶子结点可以用出度为1来判断</h2><p><a name="CyDK9"></a></p><h2 id="bool数组的memset和bitset的reset的时间复杂度比较"><a href="#bool数组的memset和bitset的reset的时间复杂度比较" class="headerlink" title="bool数组的memset和bitset的reset的时间复杂度比较"></a>bool数组的memset和bitset的reset的时间复杂度比较</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000000</span>; <span class="comment">// 要处理的元素数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testBitset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::bitset&lt;SIZE&gt; bits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;++i)bits.<span class="built_in">reset</span>();</span><br><span class="line">    <span class="comment">//bits.reset();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(end - start);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;std::bitset reset time: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; microseconds&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testMemset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> arr[SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;++i)<span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span> arr);</span><br><span class="line">    <span class="comment">//memset(arr,0,sizeof arr);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(end - start);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;memset time: &quot;</span> &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; microseconds&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">testBitset</span>();</span><br><span class="line">    <span class="built_in">testMemset</span>();</span><br><span class="line">    <span class="comment">//处理大数据的情况下bitset要快8倍，在小范围内速度优势更为明显，快了近26倍</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="mMZ28"></a></p><h2 id="sort函数指定排序方式的三种写法"><a href="#sort函数指定排序方式的三种写法" class="headerlink" title="sort函数指定排序方式的三种写法"></a>sort函数指定排序方式的三种写法</h2><p>第一种就是写一个比较函数<br>第二种是运算符的重载<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;X)<span class="type">const</span> &#123;<span class="keyword">return</span> x&lt;X.x;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>第三种<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,[&amp;](st l,st r)&#123;<span class="built_in">return</span> (l.x*l.x+l.y*l.y)&lt;(r.x*r.x+r.y*r.y);&#125;);</span><br></pre></td></tr></table></figure><br><a name="yKzMm"></a></p><h2 id="几个常用的memset的赋值"><a href="#几个常用的memset的赋值" class="headerlink" title="几个常用的memset的赋值"></a>几个常用的memset的赋值</h2><p>memset是一个字节一个字节的赋值，所以赋值为128就会变成极小的数字，赋值为127就会变成极大的数字，赋值为255就会是-1<br><a name="b0qVR"></a></p><h2 id="结构化绑定"><a href="#结构化绑定" class="headerlink" title="结构化绑定"></a>结构化绑定</h2><p><a href="https://blog.csdn.net/guangcheng0312q/article/details/109108472">https://blog.csdn.net/guangcheng0312q/article/details/109108472</a><br><a name="Sl0Zo"></a></p><h2 id="return-…-void"><a href="#return-…-void" class="headerlink" title="return ….,void();"></a>return ….,void();</h2><p>这条语句可以用来在void函数中return的时候加上一些附带的语句，例如<code>return cout&lt;&lt;-1,void();</code><br><a name="jmp0u"></a></p><h2 id="加快unordered-map的技巧"><a href="#加快unordered-map的技巧" class="headerlink" title="加快unordered_map的技巧"></a>加快unordered_map的技巧</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">mp.<span class="built_in">reserve</span>(<span class="number">1024</span>);</span><br><span class="line">mp.<span class="built_in">max_load_factor</span>(<span class="number">0.25</span>);</span><br></pre></td></tr></table></figure><p>第一句话重新分配了容器的桶数，第二句话设置了容器的最大负载因子，元素数量/总的桶数超过了负载因子就增加桶数，这样写可以防止被对默认参数的hack，变得不那么容易退化成线性速度<br>还是少用吧有时候会爆内存…..<br>2023.11.13</p><p><a name="a1VDo"></a></p><h2 id="染色法可以判断一棵无根树是否存在两个叶子结点之间的路径长度为奇数"><a href="#染色法可以判断一棵无根树是否存在两个叶子结点之间的路径长度为奇数" class="headerlink" title="染色法可以判断一棵无根树是否存在两个叶子结点之间的路径长度为奇数"></a>染色法可以判断一棵无根树是否存在两个叶子结点之间的路径长度为奇数</h2><p><a name="Av0Fx"></a></p><h2 id="范围不大的组合可以使用数组去一一映射"><a href="#范围不大的组合可以使用数组去一一映射" class="headerlink" title="范围不大的组合可以使用数组去一一映射"></a>范围不大的组合可以使用数组去一一映射</h2><p>比如枚举一个1到3的数据对，并且每对数据中的两个元素不能相同（如（1,2）,(1,3)，像(2,2)就是不合法的）<br>可以使用两层for循环加上条件判断，也可以直接先手模一下写到一个数组中这样直接一个for循环就可以解决</p><p><a name="IjGIN"></a></p><h2 id="形如-a-b-c-in-left-1-2-3-right-a-ne-b-ne-c-a-b-c-6-已知a-b-求c"><a href="#形如-a-b-c-in-left-1-2-3-right-a-ne-b-ne-c-a-b-c-6-已知a-b-求c" class="headerlink" title="形如$a,b,c\in\left \{  1,2,3\right \}  ,a\ne b\ne c,a+b+c=6$已知a,b,求c"></a>形如$a,b,c\in\left \{  1,2,3\right \}  ,a\ne b\ne c,a+b+c=6$已知a,b,求c</h2><p>利用恒等式：<br>c = 6-a-b，快速求出c而不需要两个for循环迭代加if条件判断遍历</p><p><a name="MZZ8I"></a></p><h2 id="对于边长度固定的图（如等于1），那么BFS找到的从起点结点到任意节点的路径都是最短路"><a href="#对于边长度固定的图（如等于1），那么BFS找到的从起点结点到任意节点的路径都是最短路" class="headerlink" title="对于边长度固定的图（如等于1），那么BFS找到的从起点结点到任意节点的路径都是最短路"></a>对于边长度固定的图（如等于1），那么BFS找到的从起点结点到任意节点的路径都是最短路</h2><p><a name="C0FJD"></a></p><h2 id="DAG的出栈顺序是反图的拓扑序，有向图SCC缩点后必定是DAG-缩完点之后的SCC最后一个出栈的必定是源点，但第一个出栈的不一定是汇点"><a href="#DAG的出栈顺序是反图的拓扑序，有向图SCC缩点后必定是DAG-缩完点之后的SCC最后一个出栈的必定是源点，但第一个出栈的不一定是汇点" class="headerlink" title="DAG的出栈顺序是反图的拓扑序，有向图SCC缩点后必定是DAG,缩完点之后的SCC最后一个出栈的必定是源点，但第一个出栈的不一定是汇点"></a>DAG的出栈顺序是反图的拓扑序，有向图SCC缩点后必定是DAG,缩完点之后的SCC最后一个出栈的必定是源点，但第一个出栈的不一定是汇点</h2><p><a name="riFkw"></a></p><h2 id="判断一个DAG是否是一个连通图可以用是否只存在一个汇点（只有一个点出度为0）来判断"><a href="#判断一个DAG是否是一个连通图可以用是否只存在一个汇点（只有一个点出度为0）来判断" class="headerlink" title="判断一个DAG是否是一个连通图可以用是否只存在一个汇点（只有一个点出度为0）来判断"></a>判断一个DAG是否是一个连通图可以用是否只存在一个汇点（只有一个点出度为0）来判断</h2><p><a name="pTpkj"></a></p><h2 id="求最大公约数的时候可以写成a-gcd-a-b-b这样可以防爆"><a href="#求最大公约数的时候可以写成a-gcd-a-b-b这样可以防爆" class="headerlink" title="求最大公约数的时候可以写成a/gcd(a,b)*b这样可以防爆"></a>求最大公约数的时候可以写成a/gcd(a,b)*b这样可以防爆</h2><p><a name="ElchI"></a></p><h2 id="（待验证）优先队列的初始化无序序列的时间复杂度要比直接插入元素的时间复杂度要小"><a href="#（待验证）优先队列的初始化无序序列的时间复杂度要比直接插入元素的时间复杂度要小" class="headerlink" title="（待验证）优先队列的初始化无序序列的时间复杂度要比直接插入元素的时间复杂度要小"></a>（待验证）优先队列的初始化无序序列的时间复杂度要比直接插入元素的时间复杂度要小</h2><p>上数据结构的时候发现堆有一个操作是将序列堆化，这个的操作好像时间复杂度更低一些，查了一下stl中的优先队列也有类似的操作。</p><p>因为优先队列的内部是通过堆来实现的，将一个无序序列堆化的复杂度是O(nlogn)实际上通常小于这个复杂度，接近于线性，但是插入的复杂度一般都能达到O(nlogn)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::priority_queue&lt;<span class="type">int</span>&gt; maxHeap;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; unorderedSequence = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">31</span>,<span class="number">3</span>,<span class="number">345</span>,&#125;; </span><br><span class="line">maxHeap = std::<span class="built_in">priority_queue</span>&lt;<span class="type">int</span>&gt;(unorderedSequence.<span class="built_in">begin</span>(),unorderedSequence.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h2 id="排序后保留原数组中每一个元素的索引值"><a href="#排序后保留原数组中每一个元素的索引值" class="headerlink" title="排序后保留原数组中每一个元素的索引值"></a>排序后保留原数组中每一个元素的索引值</h2><p>很多时候并不希望排序会影响索引值，因为会用到原先的索引值，一种做法是将其放在一个结构体里面，对结构体进行排序，实际上可以利用sort的自定义排序规则对一个新的索引值数组进行排序这样就不会影响到元素组中的内容<br>如<a href="https://www.luogu.com.cn/problem/AT_abc331_e">[ABC331E] Set Meal</a>，让你输出排序之后元素的下标等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; op;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; idx;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) cin &gt;&gt; b[i], idx.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, c, d; i &lt;= op; ++i) &#123;</span><br><span class="line">cin &gt;&gt; c &gt;&gt; d;</span><br><span class="line">h.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(c, d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(<span class="built_in">all</span>(idx), [&amp;](<span class="type">int</span> _a, <span class="type">int</span> _b) &#123;<span class="keyword">return</span> b[_a] &gt; b[_b];&#125;);</span><br><span class="line"><span class="comment">// idx数组存的是排序之后每个位置对应的初始元素的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : idx) </span><br><span class="line"><span class="keyword">if</span> (!h.<span class="built_in">count</span>(<span class="built_in">make_pair</span>(i, j))) &#123;</span><br><span class="line">res = <span class="built_in">max</span>(res, a[i] + b[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-int-j-1-j-lt-n-i-j-复杂度大概是ln级别的（比ln更大一些）"><a href="#for-int-j-1-j-lt-n-i-j-复杂度大概是ln级别的（比ln更大一些）" class="headerlink" title="for(int j = 1;j&lt;=n/i;++j)复杂度大概是ln级别的（比ln更大一些）"></a>for(int j = 1;j&lt;=n/i;++j)复杂度大概是ln级别的（比ln更大一些）</h2><p>或者是形如<code>for(int j = i;j&lt;=n;j += i)</code>等，就是一个调和级数画出反比例函数图像求其反常积分</p><h2 id="当元素大小比较小的时候（比如都小于1e6）动态的查询数组有几个元素在一个范围内可以用树状数组，静态可以用前缀和"><a href="#当元素大小比较小的时候（比如都小于1e6）动态的查询数组有几个元素在一个范围内可以用树状数组，静态可以用前缀和" class="headerlink" title="当元素大小比较小的时候（比如都小于1e6）动态的查询数组有几个元素在一个范围内可以用树状数组，静态可以用前缀和"></a>当元素大小比较小的时候（比如都小于1e6）动态的查询数组有几个元素在一个范围内可以用树状数组，静态可以用前缀和</h2><p>就是将tree数组，sum数组定义为一个桶，对桶进行RMQ</p><h2 id="2的模乘逆元为-p-1-gt-gt-1"><a href="#2的模乘逆元为-p-1-gt-gt-1" class="headerlink" title="2的模乘逆元为(p+1)&gt;&gt;1"></a>2的模乘逆元为(p+1)&gt;&gt;1</h2><p>由费马小定理得，$2^{p-1} \equiv 1 \ (mod\ p)$,所以有$2^{p-2}\equiv2^{-1}\equiv \frac{p+1}{2}\ (mod\ p)$,那么有$2^{-1}\equiv \frac{p+1}{2}\ (mod\ p)$也就是说2的逆元除了与2的p-2次幂相同以外，还和(p+1)&gt;&gt;1相同，由于p是素数，素数一定是奇数，那么(p+1)/2不可能是分数，所以2的模乘逆元就是(p+1)&gt;&gt;1，类似的有4对于7的模意义下的逆元等于2（(7+1)/4 = 2，前提是一定要可以被整除）</p><h1 id="寄巧"><a href="#寄巧" class="headerlink" title="寄巧"></a>寄巧</h1><p><a name="ZTCfj"></a></p><h2 id="并查集的路径压缩"><a href="#并查集的路径压缩" class="headerlink" title="并查集的路径压缩"></a>并查集的路径压缩</h2><p>如果题目对于父结点没有什么特殊的要求那么最好还是加上，因为这个真的可以被卡掉，比如这道题：<br><a href="https://codeforces.com/contest/1131/submission/226674117">不加路径压缩</a>会在第八个点tle，同样的规模第七个点就能很短时间内通过，<a href="https://codeforces.com/contest/1131/submission/226676219">加了之后</a>就通过了<br><a name="OQs8D"></a></p><h2 id="关于对拍的数据强度问题"><a href="#关于对拍的数据强度问题" class="headerlink" title="关于对拍的数据强度问题"></a>关于对拍的数据强度问题</h2><p>有一些题目如果只是单纯的随机生成数据，那么大多数情况下很有可能得到的结果和标程相同，像类似于<a href="https://codeforces.com/contest/1672/problem/D">这道题</a>：</p><p>你会得到一个长度为 $n$ 的数组 $a$ ，进行以下操作：</p><p>选择两个数 $l,r$ 满足 $1\le l&lt; r\le n$ 并且 $a[l]=a[r]$ ，将 $a[l…r]$ 替换为 $a[l+1,l+2,…r,l]$ 。</p><p>你还会得到一个长度为 $n$ 的数组 $b$ ，判断 $a$ 能否通过若干次操作变成 $b$ 。</p><p>正解是两个指针i,j，i指向$a_1$,j指向,$b_1$如果相同就++i,++j，不相同但满足b[j] == a[i - 1]并且之前有出现过没有对上的数和b[j]相同，那么j指针继续往后移动。<br>一开始写了一个假做法，认为每次查询之前有没有对上的数时只需要开一个队列，合法的数只有在队列的头和尾端，这个做法在后面对拍的时候发现了hack数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">7</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line">standout:YES</span><br></pre></td></tr></table></figure><p>当时对拍对了好久也没找出hack，因为如果单纯的生成大数据然后对拍，很有可能是都是no,就比如只有特定的排列才会输出yes，那么大多数情况下生成的数据都会是no，所以这道题的正确对拍思路是写尽量多的组数，每组的序列长度适当的小，这样才能保证最后的答案有机会是yes，这样写一定要注意数组下标会不会越界。<br>这道题一开始对拍时每次序列的长度都是在[1,200000]里面取，跑了500多组，都没发现错误…<br><a name="moyn5"></a></p><h2 id="大常数对执行速度的影响"><a href="#大常数对执行速度的影响" class="headerlink" title="大常数对执行速度的影响"></a>大常数对执行速度的影响</h2><p>或者说是被卡常，有些题目由于使用了非正解，并且复杂度并不是特别好需要题目数据配合才能通过。这个时候要特别注意常数的影响，比如这道<a href="https://www.luogu.com.cn/problem/P1972">P1972 [SDOI2009] HH的项链</a>，10的6次方的数据规模其实常数小可以用莫队卡过去：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> wr &#123;&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, p;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="type">int</span> pos[N], a[N], res[N], pre[N], suf[N], flag[N];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="type">int</span> block = (<span class="type">int</span>) <span class="built_in">sqrt</span>(n);</span><br><span class="line">    block += n % block;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        pos[i] = (i - <span class="number">1</span>) / block + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(q[i].l), <span class="built_in">read</span>(q[i].r);</span><br><span class="line">        q[i].p = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for(int i = 1;i&lt;=m;++i) cout&lt;&lt;q[i].l&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].r&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].p&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, [&amp;](Node A, Node B) &#123;</span><br><span class="line">        <span class="keyword">return</span> pos[A.l] == pos[B.l] ? (pos[A.l] &amp; <span class="number">1</span> ? A.r &gt; B.r : A.r &lt; B.r) : pos[A.l] &lt; pos[B.l];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//for(int i = 1;i&lt;=m;++i) cout&lt;&lt;q[i].l&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].r&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].p&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = flag[a[i]], flag[a[i]] = i;</span><br><span class="line">    <span class="built_in">memset</span>(flag, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) suf[i] = flag[a[i]], flag[a[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) ans += suf[--l] &gt; r;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) ans -= pre[r--] &lt; l;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) ans += pre[++r] &lt; l;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) ans -= suf[l++] &gt; r;</span><br><span class="line">        res[q[i].p] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">write</span>(res[i], <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;my.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>但如果另外一种贪心策略来移动双指针就会因为大常数过不去<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000006</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> wr &#123;&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> wr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, p;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="type">int</span> pos[N], a[N], res[N], pre[N], suf[N], flag[N], cnt[N];</span><br><span class="line"><span class="type">int</span> ans, test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    ++cnt[a[x]], test += cnt[a[x]] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    --cnt[a[x]], test -= cnt[a[x]] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="type">int</span> block = (<span class="type">int</span>) <span class="built_in">sqrt</span>(n);</span><br><span class="line">    block += n % block;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        pos[i] = (i - <span class="number">1</span>) / block + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(q[i].l), <span class="built_in">read</span>(q[i].r);</span><br><span class="line">        q[i].p = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for(int i = 1;i&lt;=m;++i) cout&lt;&lt;q[i].l&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].r&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].p&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, [&amp;](Node A, Node B) &#123;</span><br><span class="line">        <span class="keyword">return</span> pos[A.l] == pos[B.l] ? (pos[A.l] &amp; <span class="number">1</span> ? A.r &gt; B.r : A.r &lt; B.r) : pos[A.l] &lt; pos[B.l];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//for(int i = 1;i&lt;=m;++i) cout&lt;&lt;q[i].l&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].r&lt;&lt;&#x27; &#x27;&lt;&lt;q[i].p&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = flag[a[i]], flag[a[i]] = i;</span><br><span class="line">    <span class="built_in">memset</span>(flag, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) suf[i] = flag[a[i]], flag[a[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) ans += suf[--l] &gt; r, <span class="built_in">add</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) ans -= pre[r--] &lt; l, <span class="built_in">add</span>(r);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) ans += pre[++r] &lt; l, <span class="built_in">del</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) ans -= suf[l++] &gt; r, <span class="built_in">del</span>(r);</span><br><span class="line">        res[q[i].p] = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">write</span>(res[i], <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;my.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以发现只是for循环里面的语句数量多了几句就会超时，测试下来大概慢了3-4倍，差不多每次执行的时候多了2、3句话，原先600ms的数据多了这几句话就很危险（时限2s），所以在能决定复杂度的语句块内能少写就尽量少写…<br><a name="GqqNK"></a></p><h2 id="在一些对精度有要求（比如控制在1e-6）的题目中不要用默认的cout输出"><a href="#在一些对精度有要求（比如控制在1e-6）的题目中不要用默认的cout输出" class="headerlink" title="在一些对精度有要求（比如控制在1e-6）的题目中不要用默认的cout输出"></a>在一些对精度有要求（比如控制在1e-6）的题目中不要用默认的cout输出</h2><p>如果要用cout可以加上精度的控制，因为cout默认大概意思是保留6位有效数字比如<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> a = <span class="number">123.12315078765432134</span>;</span><br><span class="line">cout&lt;&lt;a;</span><br><span class="line">output：</span><br><span class="line"><span class="number">123.123</span></span><br></pre></td></tr></table></figure><br>会出现精度的丢失<br><a name="jReW5"></a></p><h2 id="在c-c-里，a-b的正负与a有关"><a href="#在c-c-里，a-b的正负与a有关" class="headerlink" title="在c/c++里，a%b的正负与a有关"></a>在c/c++里，a%b的正负与a有关</h2><h2 id="long-long-类型的数据参与除法运算或使用floor、ceil、log2等函数原型的参数类型是double的时候可能会引起精度丢失"><a href="#long-long-类型的数据参与除法运算或使用floor、ceil、log2等函数原型的参数类型是double的时候可能会引起精度丢失" class="headerlink" title="long long 类型的数据参与除法运算或使用floor、ceil、log2等函数原型的参数类型是double的时候可能会引起精度丢失"></a>long long 类型的数据参与除法运算或使用floor、ceil、log2等函数原型的参数类型是double的时候可能会引起精度丢失</h2><p>double的精度只有15-16位，如果题目最大1E17，然后是大于1E16的输入会出问题，比如1e16+9转成double类型再转回来就会变成1e16+8。<br>如果题目要求对一个long long类型除以二向上或者向下取整，最稳的办法是使用位运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向上取整</span></span><br><span class="line">(n&gt;&gt;<span class="number">1</span>)+n&amp;<span class="number">1</span></span><br><span class="line"><span class="comment">// 向下取整</span></span><br><span class="line">n&gt;&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>  同理log2等函数也是最好先预处理再计算，函数尽量少用不太安全</p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幽默的世界</title>
      <link href="/2023/10/02/%E5%B9%BD%E9%BB%98%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2023/10/02/%E5%B9%BD%E9%BB%98%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="洛谷十月月赛-幽默的世界"><a href="#洛谷十月月赛-幽默的世界" class="headerlink" title="洛谷十月月赛 幽默的世界"></a><strong>洛谷十月月赛 幽默的世界</strong></h1><p>题目描述</p><p>给定一个长为 $n$ 的序列 $a_1,a_2,\cdots,a_n$，定义 $a$ 的一个连续子序列 $a_l,a_{l+1},\cdots,a_r$ 是幽默的，当且仅当：</p><ul><li>$\sum\limits_{i=l}^ra_i&gt;0$；</li><li>对于所有 $l\le x\le y&lt;r$，满足 $\sum\limits_{i=x}^y a_i\le 0$。</li></ul><p>$q$ 次询问，每次给定两个整数 $l,r$，查询满足以下条件的数对 $(l’,r’)$ 个数：</p><ul><li>$l\le l’\le r’\le r$；</li><li>连续子序列 $a_{l’},a_{l’+1},\cdots a_{r’}$ 是幽默的。</li></ul><p>输入格式</p><p>第一行输入两个整数 $n,q$。</p><p>接下来一行输入 $n$ 个整数，第 $i$ 个整数代表 $a_i$。</p><p>接下来 $q$ 行，每行输入两个整数 $l,r$，代表一次询问。</p><p>输出格式</p><p>对于每组询问，输出一行一个整数，代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br><span class="line">-1 2 -1 -1 -1 2 -1</span><br><span class="line">2 5</span><br><span class="line">4 7</span><br><span class="line">1 7</span><br><span class="line">5 5</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>对于所有数据，保证 $1\le n,q\le 2\times 10^5$，$1\le l\le r\le n$，$|a_i|\le 10^9$。</p><p>子任务</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th style="text-align:center">特殊性质</th><th style="text-align:center">分值</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">样例</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">$n,q\le 50$</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">$n,q\le 3\times 10^3$</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">对于所有询问，$r=n$</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">对于所有询问，$l=1$</td><td style="text-align:center">15</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">-</td><td style="text-align:center">35</td></tr></tbody></table></div><p>不算难的一道题目，但是题目的描述过于抽象导致我差几十分钟写对它…<br>35pts：<br>读懂题目之后可以发现其实一个正数一定是一个幽默的数，那么再继续考虑可以发现，如果一个子序列长度大于1那么它的右边界一定是正数，并且有且只有一个正数，因为其他位置的正数都不会满足第二个要求，同时为了满足第一个要求，这个子序列的元素之和必定大于0，因此可以想到一种暴力的解法：定义一个指针先指向右边界，找到每次查询中最靠近右边界的正数，从这个正数开始找最长的满足第一个要求且不包含其他正数的子序列，多长就有多少个满足条件的子序列，反复去找直到指针指到左边界为止。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q, a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;stand.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    a[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l, r; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = r,pPos = r; j &gt;= l; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum + a[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">if</span> (pPos != j &amp;&amp; a[j]&gt;<span class="number">0</span>)sum = <span class="number">0</span>;</span><br><span class="line">                sum += a[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (a[j] &lt;= <span class="number">0</span> &amp;&amp; j &gt;= l)--j;</span><br><span class="line">                pPos = j;</span><br><span class="line">                ++j;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以证明这个做法是正确的，但是由于复杂度过高会超时。<br>100pts：<br>观察超时代码，可以发现主要的时间浪费在查询的遍历上，那么需要优化查询速度，至少要优化到O(logn)级别的复杂度，那么这个范围内可以接受的算法显然是二分，然后就往单调性方面去想，设左右边界为L,R，如果预处理出所有的正数下标，存在<code>positive</code>数组中那么显然这个下标是递增的，可以用二分查找，然后可以在O(logn)级别查到第一个下标小于等于R的正数下标r和第一个下标大于等于L的正数下标l，那么如果遍历一遍预处理出每个正数对应的最大的子序列，那么只需要计算<code>sum[r] - sum[l] + min(positive[l] - L + 1, sum[l] - sum[l - 1])</code>就可以不重不漏的查询出区间[L,R]内幽默的序列个数，但是还有个问题像下面这个数据就会输出负的数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 1</span><br><span class="line">5 -3 1 3 0</span><br><span class="line">5 5</span><br></pre></td></tr></table></figure><br>原因很简单这时候r&lt;l因为这个区间内没有正数，所以对于这种情况要将它的值取为0，合起来的表达式就是：</p><p><code>max(0ll, sum[r] - sum[l] + min(positive[l] - L + 1, sum[l] - sum[l - 1]))</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 200005</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, q, a[N], sum[N], positive[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;my.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) positive[++len] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, cnt; i &lt;= len; ++i) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = positive[i], S = <span class="number">0</span>; j &gt; positive[i - <span class="number">1</span>]; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S + a[j] &gt; <span class="number">0</span>) cnt++, S += a[j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> L, R;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">        l = <span class="built_in">lower_bound</span>(positive + <span class="number">1</span>, positive + len + <span class="number">1</span>, L) - positive;</span><br><span class="line">        r = <span class="built_in">upper_bound</span>(positive + <span class="number">1</span>, positive + len + <span class="number">1</span>, R) - positive - <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(<span class="number">0ll</span>, sum[r] - sum[l] + <span class="built_in">min</span>(positive[l] - L + <span class="number">1</span>, sum[l] - sum[l - <span class="number">1</span>])) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体来说不算难，比赛的时候由于用vector存正数，将前缀和数组从0开始赋值导致加了很多在0的时候的特判，导致在最后没调出来，比完了重构了代码就写出来了。其实对于这种题目，已经做出它的暴力版本然后发现正解出错而找不到bug的时候就应该考虑对拍，这道题的对拍不复杂，也是通过对拍在补题的时候发现了输出为负数的情况。<br>对拍代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> T)</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">random</span>(<span class="number">1</span>,<span class="number">10</span>),q = <span class="built_in">random</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;q&lt;&lt;endl;</span><br><span class="line">    fout&lt;&lt;n&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;q&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,t;i&lt;=n;++i)&#123;</span><br><span class="line">        t = <span class="built_in">random</span>(<span class="number">-5</span>,<span class="number">5</span>);</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        fout&lt;&lt;t&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    fout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,l,r;i&lt;=q;++i)&#123;</span><br><span class="line">        l = <span class="built_in">random</span>(<span class="number">1</span>,n);</span><br><span class="line">        r = <span class="built_in">random</span>(l,n);</span><br><span class="line">        cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">        fout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_dataset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">random</span>(<span class="number">2</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) <span class="built_in">build</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">create_dataset</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;stand.exe &lt; input.txt&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;my.exe &lt; input.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;fc stand.txt my.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> tot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">work</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;WrongAnswer\n&quot;</span>;</span><br><span class="line">            <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">256</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Done&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这道题充分说明了<strong>前缀和不要以0下标为开头</strong>不然在二分的时候要做一堆的判断血压容易上来…</p>]]></content>
      
      
      <categories>
          
          <category> 小比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『GROI-R2』不空白的画布</title>
      <link href="/2023/10/01/%E3%80%8EGROI-R2%E3%80%8F%E4%B8%8D%E7%A9%BA%E7%99%BD%E7%9A%84%E7%94%BB%E5%B8%83/"/>
      <url>/2023/10/01/%E3%80%8EGROI-R2%E3%80%8F%E4%B8%8D%E7%A9%BA%E7%99%BD%E7%9A%84%E7%94%BB%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h1 id="洛谷九月月赛『GROI-R2』-不空白的画布"><a href="#洛谷九月月赛『GROI-R2』-不空白的画布" class="headerlink" title="洛谷九月月赛『GROI-R2』 不空白的画布"></a><strong>洛谷九月月赛</strong>『GROI-R2』 不空白的画布</h1><p>你有连续的 $n$ 个方格，每个方格上有一个初始颜色 $c_i$，且保证 $1\le c_i \le k$。</p><p>你可以操作<strong>至多</strong> $m$ 次，每个操作为改变某个方格颜色，要求改变后的颜色范围仍在 $[1,k]$ 内。</p><p>我们称一个<strong>极长相同颜色连续段</strong>为一块，要求求出经过至多 $m$ 次操作后的<strong>最多</strong>块数。</p><p>输入格式</p><p>本题有多组测试数据。</p><p>第一行输入一个正整数 $T$ 表示数据组数。</p><p>对于每组测试数据，第一行输入三个正整数 $n,m,k$，表示画布的长度，坦尼尔作画的次数上限和颜色的取值范围。</p><p>第二行输入一个长度为 $n$ 的整数序列 $c$，表示画布上每个位置的初始颜色。</p><p>输出格式</p><p>对于每组测试数据，输出一行一个正整数，表示记忆碎片最多有多少个。</p><p>样例输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 1 3</span><br><span class="line">2 2 2</span><br><span class="line">5 2 4</span><br><span class="line">2 2 2 2 3</span><br></pre></td></tr></table></figure><p>样例输出 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>样例解释</p><p>对于第一组测试数据，坦尼尔可以将从左到右的第二个位置涂成颜色 $1$，得到 $\{c_n\}=\{2,1,2\}$，块数为 $3$。</p><p>对于第二组测试数据，坦尼尔可以将从左到右的第二个位置涂成颜色 $1$，将从左到右的第三个位置涂成颜色 $3$，得到 $\{c_n\}=\{2,1,3,2,3\}$，块数为 $5$。</p><p>数据范围</p><div class="table-container"><table><thead><tr><th style="text-align:center">$\text{Subtask}$</th><th style="text-align:center">$\sum n\le$</th><th style="text-align:center">$m\le$</th><th style="text-align:center">$k\le$</th><th style="text-align:center">分值</th></tr></thead><tbody><tr><td style="text-align:center">$1$</td><td style="text-align:center">$10$</td><td style="text-align:center">$10$</td><td style="text-align:center">$3$</td><td style="text-align:center">$10$</td></tr><tr><td style="text-align:center">$2$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$1$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$10$</td></tr><tr><td style="text-align:center">$3$</td><td style="text-align:center">$10^3$</td><td style="text-align:center">$10^3$</td><td style="text-align:center">$10^3$</td><td style="text-align:center">$15$</td></tr><tr><td style="text-align:center">$4$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$3$</td><td style="text-align:center">$25$</td></tr><tr><td style="text-align:center">$5$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$5\times 10^5$</td><td style="text-align:center">$40$</td></tr></tbody></table></div><p>对于 $100\%$ 的数据满足 $1\le  n\le 5\times 10^5$，$1\le \sum n\le 5\times 10^5$，$1\le m\le n$，$3\le  k \le 5\times 10^5$，$1\le c_i\le k$。</p><p>大部分的解法是把长度为奇数的块和长度为偶数的块放在两个数组里，分别排序，先把奇数块切掉，再切偶数块，偶数块考虑特殊情况特判。<br>比赛时也是这种想法但是写挂了,后来换一种思路，一共跑两次循环，第一次循环处理序列中块的长度大于2的部分，每次处理时三个三个的看，每三个可以加两次，第一次判断此时是不是三个，是的话就将中间一个标记为修改，此时加块数加一，用一个isMod数组记录有没有修改过，这样如果前面一个被修改过那么后面不管是什么必定是一个新的块，也要加一，这时候可以通过isMod数组判断，也是能在一个循环内完成，但是有一种情况：比如长度是7两次3 3之后（第一个循环）会剩下6 和 7上的位置没有处理，但这种情况其实就相当于长度是二的块，也就是说，第一次遍历可以解决两种情况：<br>1：长度大于2的部分（可能会剩余最后两个，比如长度7会剩，6就不会）；<br>2：长度是1的情况<br>那么如果还有剩下的，那么必然是长度为二的或者是大于二的数剩余二的情况，也就是满足：<br>c[i] == c[i - 1] &amp;&amp; c[i] != c[i + 1]&amp;&amp;!isMod[i-1]<br>一直遍历直到遍历完或者次数用完为止<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 500105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T, n, m, k, c[N];</span><br><span class="line">bitset&lt;N&gt; isMod;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        isMod.<span class="built_in">reset</span>();</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; c[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] != c[i - <span class="number">1</span>] || isMod[i - <span class="number">1</span>]) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c[i] == c[i - <span class="number">1</span>] &amp;&amp; c[i] == c[i + <span class="number">1</span>] &amp;&amp; m) &#123;</span><br><span class="line">                isMod[i] = <span class="literal">true</span>;</span><br><span class="line">                ans++, --m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i] == c[i - <span class="number">1</span>] &amp;&amp; c[i] != c[i + <span class="number">1</span>]&amp;&amp;!isMod[i<span class="number">-1</span>]) </span><br><span class="line">                ans++, --m;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个思路感觉代码还是比较精简的，只是思维量相对比较大，实现起来比较困难</p>]]></content>
      
      
      <categories>
          
          <category> 小比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新记录</title>
      <link href="/2023/10/01/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/10/01/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>2023-08-19：</p><p>上传文章：20thZJCPC</p><p>2023-09-02：<br>上传文章：test</p><p>2023-09-18：</p><p>上传文章：对拍器与数据生成。在test文章中测试图床外链</p><p>2023-09-25：</p><p>上传文章：E-梅莉的市场经济学</p><p>2023-10-01：</p><p>上传文章：算法大赛2023-村庄，博客更新记录，洛谷九月月赛『GROI-R2』不空白的画布。修改文章：20thZJCPC的文件名，更新了对图片的引用。删除文章：test。修改footer、侧边栏以及行内数学公式的渲染</p><p>2023-10-02：</p><p>上传文章：洛谷十月月赛 幽默的世界</p><p>2023-10-05：</p><p>上传文章：untitled，更改侧边栏</p><p>2023-10-7</p><p>更新文章：untitled</p><p>2023-10-9</p><p>更新文章：untitled</p><p>2023-10-13</p><p>更新文章：untitled</p><p>2023-10-25</p><p>上传文章：缺省源，XCPC模板，更新文章：untitled</p><p>2023-10-26</p><p>上传文章：19thZJCPC,更新文章：XCPC模板</p><p>2023-11-15</p><p>上传文章：ICPC2021-Nanjing-R-签到-铜牌题,修改文章untitled标题为trick,更新文章：trick</p><p>2023-11-22</p><p>更新文章：XCPC模板</p><p>2023-12-02</p><p>更新文章：XCPC模板</p><p>2023-12-11</p><p>上传文章：2023ICPC杭州站打铁游记</p><p>2024-1-6</p><p>上传文章：关于ubuntu，更新文章：trick</p><p>2024-2-7</p><p>上传文章：hexo+github个人网站开发，更新文章：缺省源，对拍器与数据生成，2023ICPC杭州站打铁游记，XCPC模板</p><p>2024-2-9</p><p>上传文章：根号分治，更新文章：trick，以及更新一些文章的分类，标签等</p><p>2024-2-13</p><p>上传文章：01字典树，更新文章：trick，XCPC模板</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对拍器与数据生成</title>
      <link href="/2023/09/18/%E5%AF%B9%E6%8B%8D%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90/"/>
      <url>/2023/09/18/%E5%AF%B9%E6%8B%8D%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p><a name="WJjdK"></a></p><h1 id="对拍器模板"><a href="#对拍器模板" class="headerlink" title="对拍器模板"></a>对拍器模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_dataset</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">create_dataset</span>();</span><br><span class="line"><span class="comment">//system(&quot;stand.exe &lt; input.txt &gt; stand.txt&quot;);</span></span><br><span class="line"><span class="comment">//system(&quot;my.exe &lt; input.txt &gt; my.txt&quot;);</span></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;stand.exe &lt; input.txt&quot;</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;my.exe &lt; input.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;fc stand.txt my.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> itNum)</span> </span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= itNum; i ++ ) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;test&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">work</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Wrong Answer\n&quot;</span>;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Done&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">dp</span>(<span class="number">64</span>);<span class="comment">//测试的数据组数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试的代码，命名为my</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">函数,变量命名等...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//多加这两行其他都不变</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;my.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确的代码，命名为stand</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">函数,变量命名等...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//多加这两行其他都不变</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;stand.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个ofstream fout(“input.txt”);以及fout.close()，close最好在不用了就写上以避免不必要的错误。ofstream fout() 的括号里面还可以传递其它参数，这里默认表示为：ofstream fout(“input.txt”,ios::trunc);<br>表示截断并覆写文件。所有可以表示的参数：<br>ios::app 添加到文件尾<br>ios::ate 把文件标志放在末尾而非起始。<br>ios::trunc 默认. 截断并覆写文件。<br>ios::nocreate 文件不存在也不创建。<br>ios::noreplace 文件存在则失败。<br>通常ios::app用的会比较多，他可以让对拍程序分开输入数据到文件</p><h1 id="linux下的对拍"><a href="#linux下的对拍" class="headerlink" title="linux下的对拍"></a>linux下的对拍</h1><p>linux下的系统命令与windows的命令不太一样，所以对拍器的写法也要变一下。</p><p>其实要改的就只有work函数以及main函数，其他都不需要变</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_dataset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">create_dataset</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;./my.out&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;./stand.out&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;diff my.txt  stand.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> itNum)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= itNum; i ++ ) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;正在运行第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;组数据&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">work</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;出错了&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Done&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;g++ my.cpp -o my.out&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;g++ stand.cpp -o stand.out&quot;</span>);</span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="nC3Pv"></a></p><h1 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h1><p>通常的数据生成比较容易，但是遇到一些不好处理的输入则需要模板<br><a name="ZPKHL"></a></p><h2 id="指定根节点的多叉树-无根树"><a href="#指定根节点的多叉树-无根树" class="headerlink" title="指定根节点的多叉树/无根树"></a>指定根节点的多叉树/无根树</h2><p>树的生成要保证边数等于结点树减一，并且不能成环且每个点之间都要联通<br>输入形式形如：<br>5<br>1 2<br>1 3<br>2 4<br>4 5<br>这种可以用并查集来维护这棵树。<br>考虑以1为根节点，那么只要对于n到2的每一个节点i,让random(1,i-1)为它的根，可以保证这样不会成环且连通。<br>如果不要求一定以1为根节点,可以用random_shuffle函数获得一个随机的1~n的排列，然后对应着输出就好。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">dsu[i] = <span class="built_in">random</span>(<span class="number">1</span>, i - <span class="number">1</span>);<span class="comment">//生成一颗以1为根节点的树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上为以1为根，随机还要重新编号对应一下，可以借助随机乱序函数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) mapp[i] = i;</span><br><span class="line"><span class="built_in">random_shuffle</span>(mapp + <span class="number">1</span>, mapp + n + <span class="number">1</span>);<span class="comment">//随机排列</span></span><br><span class="line"><span class="comment">//打印树，必要可以随机边权</span></span><br><span class="line">fout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">fout &lt;&lt; mapp[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; mapp[dsu[i]] &lt;&lt; endl;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>形如：<br>9<br>1 3 2 4 5<br>2 2 3 6<br>3 2 7 9<br>4 1 8<br>5 0<br>6 0<br>7 0<br>8 0<br>9 0<br>其中2到n+1行的第一列表示第几个节点，第二列表示接来跟着的几个数的总数是所对应的相邻节点的个数。<br>实现的方法也很简单，第一种形式已经得到了第i个结点对应的父节点，所以可以反过来开一个set数组记录父节点对应的子节点，因为第一种生成的得到的会有重复，所以用set去重。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_dataset</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">random</span>(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">fout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="comment">//生成一棵以0为根节点的树</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">son[<span class="built_in">random</span>(<span class="number">1</span>, i - <span class="number">1</span>) - <span class="number">1</span>].<span class="built_in">insert</span>(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">fout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">fout &lt;&lt; son[i].<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; son[i].<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> it : son[i]) &#123;</span><br><span class="line">fout &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法竞赛相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20thZJCPC</title>
      <link href="/2023/08/19/20thZJCPC/"/>
      <url>/2023/08/19/20thZJCPC/</url>
      
        <content type="html"><![CDATA[<p>省赛补题，顺序大致按难度(赛时通过人数)排列</p><p>CF的gym里暂时还没有今年省赛的题目上传，目前只查到了<a href="https://qoj.ac/contest/1221">D/F/G/H/I的补题链接</a><br>2023.08.22<br><a name="D6zKp"></a></p><h1 id="A-Look-and-Say"><a href="#A-Look-and-Say" class="headerlink" title="A.Look and Say"></a>A.Look and Say</h1><p><img src="/2023/08/19/20thZJCPC/lookAndSay.png" alt="lookAndSay"></p><p>翻译：</p><p>给一个数字序列，你需要使用以下方法“描述”它：</p><p>1.每段划分成最大的连续相同的数字；</p><p>2 . 对于每段，将其替换为段的长度加段中的数字。例如，“0” 应替换为 “10”， ”9999999999“ 应替换为“109” </p><p>3.将替换的段连接在一起并输出</p><p>输入：</p><p>第一行包含一个整数n，范围是[1,1000]，表示输入序列的长度；</p><p>第二行为一个长度为n的序列，表示原始序列</p><p>输出：</p><p>输出转换后的序列</p><p>签到题，就是相同连续的数字压缩成长度+数字的组合输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> pre = <span class="string">&#x27;#&#x27;</span>, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;my.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (t == pre)++cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">            cout &lt;&lt; cnt &lt;&lt; pre;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = t;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; t;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="NaOBs"></a></p><h1 id="E-Interval-Sum"><a href="#E-Interval-Sum" class="headerlink" title="E.Interval Sum"></a>E.Interval Sum</h1><p><img src="/2023/08/19/20thZJCPC/IntervalSum.png" alt></p><p>翻译</p><p>构造一个长度为n的排列，使其所有子序列的和中能够被n整除的子序列的个数最多，输出任意一种构造。</p><p>输入：</p><p>一个n，表示排列的长度</p><p>输出：</p><p>一行排列，空格分开排列中的元素</p><p>一道贪心题，猜想比较好想：考虑哪些数相加为n，有n，{1，n-1},{2,n-2}…..注意n是偶数时，要把n放排列的最前面或者最后面，并且最后没有{n/2,n-n/2}这种组合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;my.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    t = n / <span class="number">2</span> + (n &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(n &amp; <span class="number">1</span>))cout &lt;&lt; n / <span class="number">2</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; t; ++i) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n - i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题<a href="https://www.luogu.com.cn/problem/P9573">P9573 「TAOI-2」核心共振</a>和它比较像，但更难一点<br><a name="G8CRf"></a></p><h1 id="M-A-Wine-and-Four-Dishes"><a href="#M-A-Wine-and-Four-Dishes" class="headerlink" title="M.A Wine and Four Dishes"></a>M.A Wine and Four Dishes</h1><p><img src="/2023/08/19/20thZJCPC/AWineandFourDishes.png" alt></p><p>翻译：</p><p>Rice老师为自己准备了一场盛宴。宴会上有x瓶酒和y盘菜，这意味着他需要x杯和y盘。</p><p>有n个箱子。第i个盒子里有a杯子和b盘子。请帮助Rice老师确定他必须打开的最小数量的盒子，这样他才能收集到足够的杯子和盘子。如果Rice老师不可能收集到足够的杯子或盘子，那么输出“IMPOSSIBLE”。</p><p>输入</p><p>第一行包含了三个整数n,x,y表示箱子数，瓶子和盘子数</p><p>接下来n行表示每个箱子含有的瓶子和盘子数量</p><p>输出</p><p>最小数量的盒子，无解输出IMPOSSIBLE</p><p>贪心题，注意到每个箱子包含的盘子数是[0,1]，所以如果x不是0，那么优先从含有x的箱子中选最大的那几个，选完了就选剩下的箱子中y最大的那几个，如果选完了都凑不出那么就是无解，数据很小，随便做都可以过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125; box[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> n, x, y, bound = <span class="number">1</span>, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;my.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span> (!(x || y)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; box[i].a &gt;&gt; box[i].b;</span><br><span class="line">    <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(box + <span class="number">1</span>, box + <span class="number">1</span> + n, [&amp;](Bottle A, Bottle B) &#123; <span class="keyword">return</span> A.a &gt; B.a || A.a == B.a &amp;&amp; A.b &gt; B.b; &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!box[x].a) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; ++i, ++bound) t += box[i].b;</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= y) &#123;</span><br><span class="line">            cout &lt;&lt; x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(box + bound, box + <span class="number">1</span> + n, [&amp;](Bottle A, Bottle B) &#123; <span class="keyword">return</span> A.b &gt; B.b; &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = bound; i &lt;= n; ++i) &#123;</span><br><span class="line">            t += box[i].b;</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= y) &#123;</span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">sort</span>(box + <span class="number">1</span>, box + <span class="number">1</span> + n, [&amp;](Bottle A, Bottle B) &#123; <span class="keyword">return</span> A.b &gt; B.b; &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            t += box[i].b;</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= y) &#123;</span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;IMPOSSIBLE&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比赛的时候还不知道sort还有这种写法，嫌写比较函数太复杂用优先队列和pair瞎搞做对的，有些队伍用搜索剪枝过的，好像背包也可以<br><a name="xSdUp"></a></p><h1 id="F-Turn-the-Light"><a href="#F-Turn-the-Light" class="headerlink" title="F.Turn the Light"></a>F.Turn the Light</h1><p><img src="/2023/08/19/20thZJCPC/TurntheLight.png" alt="TurntheLight"><br>翻译：<br>这是一个交互问题。<br>Putata有n个灯，从1到n从左到右编号。最初，所有的灯都是关着的。其中一盏灯是他最喜欢的灯,灯的号码是隐藏的。 Budada想知道Putata最喜欢的灯的编号，他可以做如下查询:<br>“? x”:如果x的灯是关的，打开编号为x的灯，然后问putata，在putata最喜欢的灯的左边打开的灯数的绝对值减去右边打开的灯数。<br>Budada只能进行不超过40次的查询。请帮他找到putata最喜欢的灯。在这个问题中，交互者是自适应的，这意味着答案可能不是固定的，交互者可以任意选择它，并且答案将与你与交互者的交互相一致。<br>已通过此<a href="https://qoj.ac/contest/1221/problem/6394">oj</a>的评测<br>2023.08.22<br>一眼二分，因为首先这个数据范围符合二分(log2(n)&lt;40)，并且不难看出如果输出和上一次比较没有变化那么那个数就是喜欢的数，但是发现由于输出的是差的绝对值，所以没有单调性，但又发现log2(n)*2是一个接近40的数，所以猜测每次问两次保证单调性：每次都先问左边界的数是不是喜欢的数字，然后再二分问中间的数是不是喜欢的先问左边界就保证了左边的数始终大于右边的数，也就去掉了绝对值使其有了单调性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, pre, t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + <span class="number">1</span> + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (t == pre) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = t;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (t == pre) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre &gt; t) r = mid - <span class="number">1</span>, l++;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        pre = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验题代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, pre, t;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">1000006</span>];</span><br><span class="line"><span class="type">int</span> lLight, rLight, cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_num</span><span class="params">(<span class="type">char</span> c, <span class="type">int</span> x, <span class="type">int</span> fav)</span> </span>&#123;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;!&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == fav &amp;&amp; cnt &lt;= <span class="number">40</span>)cout &lt;&lt; <span class="string">&quot;Accept&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cnt &gt; <span class="number">40</span>)cout &lt;&lt; <span class="string">&quot;Time Limit Error&quot;</span> &lt;&lt; endl, <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Wrong Answer&quot;</span> &lt;&lt; endl, <span class="built_in">getchar</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; fav &amp;&amp; !st[x]) &#123;</span><br><span class="line">            ++rLight;</span><br><span class="line">            st[x] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; fav &amp;&amp; !st[x]) &#123;</span><br><span class="line">            ++lLight;</span><br><span class="line">            st[x] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">abs</span>(lLight - rLight) &lt;&lt; endl;</span><br><span class="line">        t = <span class="built_in">abs</span>(lLight - rLight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    n = pre = t = lLight = rLight = cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    n = <span class="built_in">random</span>(<span class="number">1</span>, <span class="number">1000000</span>);</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">random</span>(<span class="number">1</span>, n);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + <span class="number">1</span> + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">get_num</span>(<span class="string">&#x27;?&#x27;</span>, l, num);</span><br><span class="line">        <span class="keyword">if</span> (t == pre) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">get_num</span>(<span class="string">&#x27;!&#x27;</span>, l, num);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = t;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">get_num</span>(<span class="string">&#x27;?&#x27;</span>, mid, num);</span><br><span class="line">        <span class="keyword">if</span> (t == pre) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; mid &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">get_num</span>(<span class="string">&#x27;!&#x27;</span>, mid, num);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre &gt; t)</span><br><span class="line">            r = mid - <span class="number">1</span>, l++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        pre = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1024</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;正在运行第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑了很多组对拍发现其实这个算法能够在29次询问以内通过</p><p><a name="rEnYB"></a></p><h1 id="K-Lazy-but-Diligent"><a href="#K-Lazy-but-Diligent" class="headerlink" title="K. Lazy but Diligent"></a><strong>K. Lazy but Diligent</strong></h1><p><img src="/2023/08/19/20thZJCPC/LazybutDiligent.png" alt="LazybutDiligent"><br>翻译：<br>PigeIand大学拥有n幢编号分别为1-n的建筑物，其中1号楼是学生宿舍，其他是教学楼。所有建筑物通过双向路径连接，其中第i条路是长度为li,链接xi和yi楼，从a时间开始，到b时间结束。小猪需要在t时间后回到宿舍休息，更重要的是，在她的学习时间，小猪可以偷偷溜回去睡觉。小猪很懒，但很聪明，所以她希望 在学习期间至少花 s 个单位的时间在宿舍睡觉。我们认为小猪参加课程i，当且仅当她在从ai到bi的时间里都待在pi楼，这意味着她必须完成整个课程。请输出小猪最多能学习多少门课程，同时满足她的睡眠要求。<br>输入：<br>第一行包含五个整数n，m，g，t，s，表示建筑物的数目、道路的数目、课程的数目，总学习时间，需要睡眠的时间<br>以下m行中的每一行都包含三个整数$x_{i},y_i,l_i$，表示连接x和y的双向路径，长度为l。<br>以下q行中的每一行都包含三个整数$a_i,b_i,p_i$，表示这门课程在p楼从a点开始到b点结束。<br>输出：<br>最多能学习多少门课程</p><p>这题的程序对拍目前只验证了树这一特殊图的情况<br>2023.08.21<br>第一次做这种图上的dp。一般没有什么思路感觉像深搜的时候就可以考虑dp了。<br>n个楼，m条路，m的数据保证了图是联通的，q个课程，问在满足条件下最多可以学几门。<br>看范围q&lt;=400,考虑n^3的dp，也就是说状态的维数必须是小于等于3，首先因为要枚举，所以显然有一维一定是i，表示当前枚举到第几个课程，那么可以发现上一步在哪里也会影响到后面的决策，所以再加一维j，表示在哪里，由于要枚举当前和之前在哪里，所以复杂度再加上n^2,总复杂度在n^3左右可以通过。<br>除了第i个课并且此时在j楼时最多能学习的课程的数目要用dp表存储以外，这道题还需要在第i个课并且此时在j楼时最多能休息的时间长度上dp，因为存在中途可以回去睡觉的情况：当这个人前一步在k位置并且要走到j位置时，因为j课程有开始时间的限制，所以如果他走到j还要花时间等待j课程到开始时间，所以不如在k点时先回到1号点休息后再从1号点走到j点，这样就能保证在不耽误课程的情况下能够谁最多的时间（前提是回1号点再走到j点不会大于j课程开始时间）。<br>状态定义：<br>dp[i][j]，表示已经上到i个课并且此时在j楼时最多能学习的课程的数目<br>rest[i][j],表示已经上到i个课并且此时在j楼时最多能休息的时间的长度<br>状态转移：<br>当枚举的前一个有课的教学楼的位置能够到达（只有在这个位置上过课的才有必要停留在这个位置，否则对于结果没有贡献也就没有必要到那个位置），并从这幢楼的课程的结束时间加上从这个位置到当前想去的位置所需要的时间：<br>即当满足：<br><code>dp[i - 1][course[k].p] &amp;&amp; dist[course[k].p][course[j].p] + course[k].b &lt;= course[j].a</code><br>就可以计算从k点时先回到1号点休息后再从1号点走到j点最多可以休息的时间restT：<br><code>restT = max(course[j].a - course[k].b - dist[course[k].p][1] - dist[1][course[j].p], 0)</code><br>然后需要判断两个限制条件：一个是学完课程后能不能在规定的时间内回到1号点，第二个是总的睡眠时间小于需要的睡眠时间，<br>即当满足：<br><code>course[j].b + dist[course[j].p][1] &lt;= t &amp;&amp; (t - course[j].b - dist[course[j].p][1]) + restT + rest[i - 1][k] &gt;= s</code><br>有转移方程：<br><code>dp[i][course[j].p] = max(dp[i][course[j].p], dp[i - 1][course[k].p] + 1)</code><br><code>rest[i][j] = min(s, max(rest[i][j], rest[i - 1][k] + restT))</code><br>同时更新答案：<code>ans = max(ans, dp[i][course[j].p])</code><br>开始之前先floyd跑出任意2栋楼直接最短路，存在dist数组里预处理。也要预处理出到第一个位置可以睡的最长时间和能不能到达那个位置，因为第一个位置比较特殊不用考虑前一个位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line">output：<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">15</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">8</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line">output：<span class="number">2</span></span><br><span class="line"></span><br><span class="line">hack：</span><br><span class="line"></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5883</span> <span class="number">1327</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">43</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">48</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">37</span></span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">43</span></span><br><span class="line"><span class="number">1398</span> <span class="number">5257</span> <span class="number">2</span></span><br><span class="line">output：<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3760</span> <span class="number">1835</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">16</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">53</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">89</span></span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">61</span></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">49</span></span><br><span class="line"><span class="number">320</span> <span class="number">1728</span> <span class="number">4</span></span><br><span class="line"><span class="number">437</span> <span class="number">2046</span> <span class="number">2</span></span><br><span class="line"><span class="number">1950</span> <span class="number">2242</span> <span class="number">6</span></span><br><span class="line"><span class="number">3754</span> <span class="number">3758</span> <span class="number">3</span></span><br><span class="line"><span class="number">1689</span> <span class="number">3242</span> <span class="number">5</span></span><br><span class="line">output: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1967</span> <span class="number">1249</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">40</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">72</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">93</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">49</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">36</span></span><br><span class="line"><span class="number">1651</span> <span class="number">1928</span> <span class="number">5</span></span><br><span class="line"><span class="number">591</span> <span class="number">770</span> <span class="number">6</span></span><br><span class="line"><span class="number">1557</span> <span class="number">1612</span> <span class="number">4</span></span><br><span class="line">output:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">大样例:</span><br><span class="line"><span class="number">155</span> <span class="number">154</span> <span class="number">126</span> <span class="number">3118</span> <span class="number">1830</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">66</span></span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">89</span></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">42</span></span><br><span class="line"><span class="number">8</span> <span class="number">4</span> <span class="number">81</span></span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">59</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">28</span></span><br><span class="line"><span class="number">11</span> <span class="number">8</span> <span class="number">33</span></span><br><span class="line"><span class="number">12</span> <span class="number">4</span> <span class="number">38</span></span><br><span class="line"><span class="number">13</span> <span class="number">3</span> <span class="number">70</span></span><br><span class="line"><span class="number">14</span> <span class="number">3</span> <span class="number">93</span></span><br><span class="line"><span class="number">15</span> <span class="number">13</span> <span class="number">71</span></span><br><span class="line"><span class="number">16</span> <span class="number">15</span> <span class="number">28</span></span><br><span class="line"><span class="number">17</span> <span class="number">2</span> <span class="number">87</span></span><br><span class="line"><span class="number">18</span> <span class="number">8</span> <span class="number">41</span></span><br><span class="line"><span class="number">19</span> <span class="number">4</span> <span class="number">67</span></span><br><span class="line"><span class="number">20</span> <span class="number">13</span> <span class="number">12</span></span><br><span class="line"><span class="number">21</span> <span class="number">15</span> <span class="number">27</span></span><br><span class="line"><span class="number">22</span> <span class="number">15</span> <span class="number">59</span></span><br><span class="line"><span class="number">23</span> <span class="number">15</span> <span class="number">72</span></span><br><span class="line"><span class="number">24</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">25</span> <span class="number">11</span> <span class="number">59</span></span><br><span class="line"><span class="number">26</span> <span class="number">12</span> <span class="number">12</span></span><br><span class="line"><span class="number">27</span> <span class="number">8</span> <span class="number">57</span></span><br><span class="line"><span class="number">28</span> <span class="number">15</span> <span class="number">50</span></span><br><span class="line"><span class="number">29</span> <span class="number">15</span> <span class="number">51</span></span><br><span class="line"><span class="number">30</span> <span class="number">4</span> <span class="number">18</span></span><br><span class="line"><span class="number">31</span> <span class="number">1</span> <span class="number">82</span></span><br><span class="line"><span class="number">32</span> <span class="number">3</span> <span class="number">66</span></span><br><span class="line"><span class="number">33</span> <span class="number">3</span> <span class="number">35</span></span><br><span class="line"><span class="number">34</span> <span class="number">10</span> <span class="number">28</span></span><br><span class="line"><span class="number">35</span> <span class="number">5</span> <span class="number">89</span></span><br><span class="line"><span class="number">36</span> <span class="number">14</span> <span class="number">70</span></span><br><span class="line"><span class="number">37</span> <span class="number">5</span> <span class="number">22</span></span><br><span class="line"><span class="number">38</span> <span class="number">15</span> <span class="number">93</span></span><br><span class="line"><span class="number">39</span> <span class="number">10</span> <span class="number">52</span></span><br><span class="line"><span class="number">40</span> <span class="number">29</span> <span class="number">8</span></span><br><span class="line"><span class="number">41</span> <span class="number">25</span> <span class="number">10</span></span><br><span class="line"><span class="number">42</span> <span class="number">26</span> <span class="number">103</span></span><br><span class="line"><span class="number">43</span> <span class="number">39</span> <span class="number">36</span></span><br><span class="line"><span class="number">44</span> <span class="number">7</span> <span class="number">65</span></span><br><span class="line"><span class="number">45</span> <span class="number">21</span> <span class="number">71</span></span><br><span class="line"><span class="number">46</span> <span class="number">37</span> <span class="number">91</span></span><br><span class="line"><span class="number">47</span> <span class="number">11</span> <span class="number">67</span></span><br><span class="line"><span class="number">48</span> <span class="number">8</span> <span class="number">52</span></span><br><span class="line"><span class="number">49</span> <span class="number">32</span> <span class="number">91</span></span><br><span class="line"><span class="number">50</span> <span class="number">31</span> <span class="number">46</span></span><br><span class="line"><span class="number">51</span> <span class="number">10</span> <span class="number">83</span></span><br><span class="line"><span class="number">52</span> <span class="number">19</span> <span class="number">58</span></span><br><span class="line"><span class="number">53</span> <span class="number">42</span> <span class="number">77</span></span><br><span class="line"><span class="number">54</span> <span class="number">31</span> <span class="number">85</span></span><br><span class="line"><span class="number">55</span> <span class="number">30</span> <span class="number">31</span></span><br><span class="line"><span class="number">56</span> <span class="number">2</span> <span class="number">37</span></span><br><span class="line"><span class="number">57</span> <span class="number">31</span> <span class="number">104</span></span><br><span class="line"><span class="number">58</span> <span class="number">26</span> <span class="number">20</span></span><br><span class="line"><span class="number">59</span> <span class="number">55</span> <span class="number">14</span></span><br><span class="line"><span class="number">60</span> <span class="number">47</span> <span class="number">73</span></span><br><span class="line"><span class="number">61</span> <span class="number">60</span> <span class="number">27</span></span><br><span class="line"><span class="number">62</span> <span class="number">12</span> <span class="number">43</span></span><br><span class="line"><span class="number">63</span> <span class="number">36</span> <span class="number">36</span></span><br><span class="line"><span class="number">64</span> <span class="number">19</span> <span class="number">95</span></span><br><span class="line"><span class="number">65</span> <span class="number">33</span> <span class="number">71</span></span><br><span class="line"><span class="number">66</span> <span class="number">27</span> <span class="number">3</span></span><br><span class="line"><span class="number">67</span> <span class="number">17</span> <span class="number">99</span></span><br><span class="line"><span class="number">68</span> <span class="number">29</span> <span class="number">4</span></span><br><span class="line"><span class="number">69</span> <span class="number">17</span> <span class="number">32</span></span><br><span class="line"><span class="number">70</span> <span class="number">63</span> <span class="number">64</span></span><br><span class="line"><span class="number">71</span> <span class="number">44</span> <span class="number">51</span></span><br><span class="line"><span class="number">72</span> <span class="number">20</span> <span class="number">25</span></span><br><span class="line"><span class="number">73</span> <span class="number">31</span> <span class="number">47</span></span><br><span class="line"><span class="number">74</span> <span class="number">65</span> <span class="number">23</span></span><br><span class="line"><span class="number">75</span> <span class="number">43</span> <span class="number">29</span></span><br><span class="line"><span class="number">76</span> <span class="number">50</span> <span class="number">5</span></span><br><span class="line"><span class="number">77</span> <span class="number">59</span> <span class="number">63</span></span><br><span class="line"><span class="number">78</span> <span class="number">60</span> <span class="number">17</span></span><br><span class="line"><span class="number">79</span> <span class="number">30</span> <span class="number">86</span></span><br><span class="line"><span class="number">80</span> <span class="number">41</span> <span class="number">32</span></span><br><span class="line"><span class="number">81</span> <span class="number">3</span> <span class="number">15</span></span><br><span class="line"><span class="number">82</span> <span class="number">26</span> <span class="number">72</span></span><br><span class="line"><span class="number">83</span> <span class="number">80</span> <span class="number">2</span></span><br><span class="line"><span class="number">84</span> <span class="number">39</span> <span class="number">49</span></span><br><span class="line"><span class="number">85</span> <span class="number">66</span> <span class="number">40</span></span><br><span class="line"><span class="number">86</span> <span class="number">22</span> <span class="number">26</span></span><br><span class="line"><span class="number">87</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="number">88</span> <span class="number">38</span> <span class="number">91</span></span><br><span class="line"><span class="number">89</span> <span class="number">22</span> <span class="number">96</span></span><br><span class="line"><span class="number">90</span> <span class="number">36</span> <span class="number">4</span></span><br><span class="line"><span class="number">91</span> <span class="number">52</span> <span class="number">52</span></span><br><span class="line"><span class="number">92</span> <span class="number">66</span> <span class="number">99</span></span><br><span class="line"><span class="number">93</span> <span class="number">52</span> <span class="number">54</span></span><br><span class="line"><span class="number">94</span> <span class="number">1</span> <span class="number">73</span></span><br><span class="line"><span class="number">95</span> <span class="number">67</span> <span class="number">1</span></span><br><span class="line"><span class="number">96</span> <span class="number">6</span> <span class="number">21</span></span><br><span class="line"><span class="number">97</span> <span class="number">65</span> <span class="number">23</span></span><br><span class="line"><span class="number">98</span> <span class="number">90</span> <span class="number">91</span></span><br><span class="line"><span class="number">99</span> <span class="number">42</span> <span class="number">32</span></span><br><span class="line"><span class="number">100</span> <span class="number">75</span> <span class="number">55</span></span><br><span class="line"><span class="number">101</span> <span class="number">90</span> <span class="number">47</span></span><br><span class="line"><span class="number">102</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">103</span> <span class="number">32</span> <span class="number">77</span></span><br><span class="line"><span class="number">104</span> <span class="number">47</span> <span class="number">86</span></span><br><span class="line"><span class="number">105</span> <span class="number">5</span> <span class="number">76</span></span><br><span class="line"><span class="number">106</span> <span class="number">83</span> <span class="number">50</span></span><br><span class="line"><span class="number">107</span> <span class="number">90</span> <span class="number">3</span></span><br><span class="line"><span class="number">108</span> <span class="number">52</span> <span class="number">88</span></span><br><span class="line"><span class="number">109</span> <span class="number">10</span> <span class="number">72</span></span><br><span class="line"><span class="number">110</span> <span class="number">40</span> <span class="number">96</span></span><br><span class="line"><span class="number">111</span> <span class="number">71</span> <span class="number">71</span></span><br><span class="line"><span class="number">112</span> <span class="number">45</span> <span class="number">10</span></span><br><span class="line"><span class="number">113</span> <span class="number">21</span> <span class="number">85</span></span><br><span class="line"><span class="number">114</span> <span class="number">21</span> <span class="number">56</span></span><br><span class="line"><span class="number">115</span> <span class="number">15</span> <span class="number">80</span></span><br><span class="line"><span class="number">116</span> <span class="number">40</span> <span class="number">59</span></span><br><span class="line"><span class="number">117</span> <span class="number">34</span> <span class="number">78</span></span><br><span class="line"><span class="number">118</span> <span class="number">60</span> <span class="number">66</span></span><br><span class="line"><span class="number">119</span> <span class="number">114</span> <span class="number">47</span></span><br><span class="line"><span class="number">120</span> <span class="number">64</span> <span class="number">24</span></span><br><span class="line"><span class="number">121</span> <span class="number">72</span> <span class="number">19</span></span><br><span class="line"><span class="number">122</span> <span class="number">101</span> <span class="number">68</span></span><br><span class="line"><span class="number">123</span> <span class="number">46</span> <span class="number">27</span></span><br><span class="line"><span class="number">124</span> <span class="number">55</span> <span class="number">17</span></span><br><span class="line"><span class="number">125</span> <span class="number">22</span> <span class="number">13</span></span><br><span class="line"><span class="number">126</span> <span class="number">8</span> <span class="number">12</span></span><br><span class="line"><span class="number">127</span> <span class="number">49</span> <span class="number">96</span></span><br><span class="line"><span class="number">128</span> <span class="number">70</span> <span class="number">28</span></span><br><span class="line"><span class="number">129</span> <span class="number">58</span> <span class="number">35</span></span><br><span class="line"><span class="number">130</span> <span class="number">108</span> <span class="number">21</span></span><br><span class="line"><span class="number">131</span> <span class="number">58</span> <span class="number">65</span></span><br><span class="line"><span class="number">132</span> <span class="number">40</span> <span class="number">9</span></span><br><span class="line"><span class="number">133</span> <span class="number">100</span> <span class="number">37</span></span><br><span class="line"><span class="number">134</span> <span class="number">65</span> <span class="number">73</span></span><br><span class="line"><span class="number">135</span> <span class="number">74</span> <span class="number">76</span></span><br><span class="line"><span class="number">136</span> <span class="number">17</span> <span class="number">54</span></span><br><span class="line"><span class="number">137</span> <span class="number">42</span> <span class="number">63</span></span><br><span class="line"><span class="number">138</span> <span class="number">21</span> <span class="number">32</span></span><br><span class="line"><span class="number">139</span> <span class="number">44</span> <span class="number">102</span></span><br><span class="line"><span class="number">140</span> <span class="number">45</span> <span class="number">91</span></span><br><span class="line"><span class="number">141</span> <span class="number">17</span> <span class="number">40</span></span><br><span class="line"><span class="number">142</span> <span class="number">120</span> <span class="number">56</span></span><br><span class="line"><span class="number">143</span> <span class="number">74</span> <span class="number">78</span></span><br><span class="line"><span class="number">144</span> <span class="number">31</span> <span class="number">1</span></span><br><span class="line"><span class="number">145</span> <span class="number">12</span> <span class="number">75</span></span><br><span class="line"><span class="number">146</span> <span class="number">47</span> <span class="number">46</span></span><br><span class="line"><span class="number">147</span> <span class="number">26</span> <span class="number">86</span></span><br><span class="line"><span class="number">148</span> <span class="number">30</span> <span class="number">14</span></span><br><span class="line"><span class="number">149</span> <span class="number">115</span> <span class="number">69</span></span><br><span class="line"><span class="number">150</span> <span class="number">32</span> <span class="number">12</span></span><br><span class="line"><span class="number">151</span> <span class="number">57</span> <span class="number">87</span></span><br><span class="line"><span class="number">152</span> <span class="number">106</span> <span class="number">20</span></span><br><span class="line"><span class="number">153</span> <span class="number">110</span> <span class="number">57</span></span><br><span class="line"><span class="number">154</span> <span class="number">139</span> <span class="number">3</span></span><br><span class="line"><span class="number">155</span> <span class="number">121</span> <span class="number">60</span></span><br><span class="line"><span class="number">1889</span> <span class="number">2840</span> <span class="number">127</span></span><br><span class="line"><span class="number">2328</span> <span class="number">2789</span> <span class="number">9</span></span><br><span class="line"><span class="number">1254</span> <span class="number">1456</span> <span class="number">52</span></span><br><span class="line"><span class="number">2231</span> <span class="number">3048</span> <span class="number">25</span></span><br><span class="line"><span class="number">1937</span> <span class="number">2019</span> <span class="number">96</span></span><br><span class="line"><span class="number">71</span> <span class="number">117</span> <span class="number">91</span></span><br><span class="line"><span class="number">556</span> <span class="number">1318</span> <span class="number">79</span></span><br><span class="line"><span class="number">2029</span> <span class="number">2616</span> <span class="number">33</span></span><br><span class="line"><span class="number">363</span> <span class="number">1158</span> <span class="number">29</span></span><br><span class="line"><span class="number">60</span> <span class="number">1979</span> <span class="number">40</span></span><br><span class="line"><span class="number">2938</span> <span class="number">2971</span> <span class="number">95</span></span><br><span class="line"><span class="number">1506</span> <span class="number">2530</span> <span class="number">15</span></span><br><span class="line"><span class="number">484</span> <span class="number">1232</span> <span class="number">13</span></span><br><span class="line"><span class="number">2142</span> <span class="number">2273</span> <span class="number">94</span></span><br><span class="line"><span class="number">2418</span> <span class="number">3085</span> <span class="number">26</span></span><br><span class="line"><span class="number">1456</span> <span class="number">2049</span> <span class="number">69</span></span><br><span class="line"><span class="number">409</span> <span class="number">2793</span> <span class="number">81</span></span><br><span class="line"><span class="number">2506</span> <span class="number">2876</span> <span class="number">122</span></span><br><span class="line"><span class="number">1694</span> <span class="number">2651</span> <span class="number">43</span></span><br><span class="line"><span class="number">2734</span> <span class="number">3020</span> <span class="number">87</span></span><br><span class="line"><span class="number">665</span> <span class="number">1578</span> <span class="number">134</span></span><br><span class="line"><span class="number">1107</span> <span class="number">1681</span> <span class="number">145</span></span><br><span class="line"><span class="number">2654</span> <span class="number">3059</span> <span class="number">73</span></span><br><span class="line"><span class="number">387</span> <span class="number">1226</span> <span class="number">143</span></span><br><span class="line"><span class="number">1957</span> <span class="number">2556</span> <span class="number">133</span></span><br><span class="line"><span class="number">1355</span> <span class="number">1893</span> <span class="number">93</span></span><br><span class="line"><span class="number">995</span> <span class="number">1661</span> <span class="number">152</span></span><br><span class="line"><span class="number">1011</span> <span class="number">2205</span> <span class="number">51</span></span><br><span class="line"><span class="number">1251</span> <span class="number">2780</span> <span class="number">58</span></span><br><span class="line"><span class="number">2251</span> <span class="number">2374</span> <span class="number">121</span></span><br><span class="line"><span class="number">1824</span> <span class="number">1847</span> <span class="number">54</span></span><br><span class="line"><span class="number">504</span> <span class="number">1866</span> <span class="number">42</span></span><br><span class="line"><span class="number">738</span> <span class="number">2361</span> <span class="number">154</span></span><br><span class="line"><span class="number">1233</span> <span class="number">1627</span> <span class="number">78</span></span><br><span class="line"><span class="number">1330</span> <span class="number">2763</span> <span class="number">68</span></span><br><span class="line"><span class="number">1994</span> <span class="number">2048</span> <span class="number">18</span></span><br><span class="line"><span class="number">1636</span> <span class="number">2392</span> <span class="number">66</span></span><br><span class="line"><span class="number">17</span> <span class="number">2079</span> <span class="number">155</span></span><br><span class="line"><span class="number">1324</span> <span class="number">2415</span> <span class="number">45</span></span><br><span class="line"><span class="number">675</span> <span class="number">1181</span> <span class="number">129</span></span><br><span class="line"><span class="number">1536</span> <span class="number">2185</span> <span class="number">108</span></span><br><span class="line"><span class="number">1332</span> <span class="number">1752</span> <span class="number">57</span></span><br><span class="line"><span class="number">1307</span> <span class="number">2932</span> <span class="number">85</span></span><br><span class="line"><span class="number">1078</span> <span class="number">1130</span> <span class="number">99</span></span><br><span class="line"><span class="number">902</span> <span class="number">982</span> <span class="number">24</span></span><br><span class="line"><span class="number">1791</span> <span class="number">2453</span> <span class="number">21</span></span><br><span class="line"><span class="number">1528</span> <span class="number">2256</span> <span class="number">148</span></span><br><span class="line"><span class="number">3032</span> <span class="number">3047</span> <span class="number">114</span></span><br><span class="line"><span class="number">1493</span> <span class="number">3016</span> <span class="number">103</span></span><br><span class="line"><span class="number">1298</span> <span class="number">2529</span> <span class="number">104</span></span><br><span class="line"><span class="number">434</span> <span class="number">2578</span> <span class="number">63</span></span><br><span class="line"><span class="number">1682</span> <span class="number">2611</span> <span class="number">36</span></span><br><span class="line"><span class="number">1722</span> <span class="number">3056</span> <span class="number">5</span></span><br><span class="line"><span class="number">350</span> <span class="number">2091</span> <span class="number">20</span></span><br><span class="line"><span class="number">1822</span> <span class="number">2810</span> <span class="number">62</span></span><br><span class="line"><span class="number">1196</span> <span class="number">1885</span> <span class="number">38</span></span><br><span class="line"><span class="number">486</span> <span class="number">1738</span> <span class="number">105</span></span><br><span class="line"><span class="number">722</span> <span class="number">1375</span> <span class="number">17</span></span><br><span class="line"><span class="number">495</span> <span class="number">1559</span> <span class="number">120</span></span><br><span class="line"><span class="number">262</span> <span class="number">837</span> <span class="number">37</span></span><br><span class="line"><span class="number">404</span> <span class="number">2209</span> <span class="number">124</span></span><br><span class="line"><span class="number">1621</span> <span class="number">2570</span> <span class="number">89</span></span><br><span class="line"><span class="number">1966</span> <span class="number">2783</span> <span class="number">65</span></span><br><span class="line"><span class="number">2970</span> <span class="number">3024</span> <span class="number">50</span></span><br><span class="line"><span class="number">2020</span> <span class="number">3033</span> <span class="number">136</span></span><br><span class="line"><span class="number">1410</span> <span class="number">1559</span> <span class="number">83</span></span><br><span class="line"><span class="number">504</span> <span class="number">1481</span> <span class="number">90</span></span><br><span class="line"><span class="number">288</span> <span class="number">1350</span> <span class="number">97</span></span><br><span class="line"><span class="number">755</span> <span class="number">1289</span> <span class="number">117</span></span><br><span class="line"><span class="number">1232</span> <span class="number">1552</span> <span class="number">80</span></span><br><span class="line"><span class="number">2967</span> <span class="number">3025</span> <span class="number">70</span></span><br><span class="line"><span class="number">1695</span> <span class="number">2304</span> <span class="number">106</span></span><br><span class="line"><span class="number">2874</span> <span class="number">2900</span> <span class="number">109</span></span><br><span class="line"><span class="number">1257</span> <span class="number">3109</span> <span class="number">56</span></span><br><span class="line"><span class="number">1900</span> <span class="number">2510</span> <span class="number">101</span></span><br><span class="line"><span class="number">2535</span> <span class="number">2961</span> <span class="number">32</span></span><br><span class="line"><span class="number">2636</span> <span class="number">2975</span> <span class="number">48</span></span><br><span class="line"><span class="number">2951</span> <span class="number">2962</span> <span class="number">14</span></span><br><span class="line"><span class="number">2964</span> <span class="number">2994</span> <span class="number">130</span></span><br><span class="line"><span class="number">1325</span> <span class="number">1407</span> <span class="number">35</span></span><br><span class="line"><span class="number">60</span> <span class="number">523</span> <span class="number">88</span></span><br><span class="line"><span class="number">1701</span> <span class="number">2273</span> <span class="number">12</span></span><br><span class="line"><span class="number">710</span> <span class="number">2279</span> <span class="number">31</span></span><br><span class="line"><span class="number">557</span> <span class="number">668</span> <span class="number">76</span></span><br><span class="line"><span class="number">2459</span> <span class="number">2546</span> <span class="number">111</span></span><br><span class="line"><span class="number">2925</span> <span class="number">3092</span> <span class="number">119</span></span><br><span class="line"><span class="number">700</span> <span class="number">2041</span> <span class="number">128</span></span><br><span class="line"><span class="number">2117</span> <span class="number">2311</span> <span class="number">125</span></span><br><span class="line"><span class="number">2152</span> <span class="number">2252</span> <span class="number">126</span></span><br><span class="line"><span class="number">1646</span> <span class="number">2038</span> <span class="number">8</span></span><br><span class="line"><span class="number">1867</span> <span class="number">3039</span> <span class="number">102</span></span><br><span class="line"><span class="number">2341</span> <span class="number">2360</span> <span class="number">34</span></span><br><span class="line"><span class="number">906</span> <span class="number">1225</span> <span class="number">86</span></span><br><span class="line"><span class="number">1270</span> <span class="number">1906</span> <span class="number">150</span></span><br><span class="line"><span class="number">267</span> <span class="number">2672</span> <span class="number">39</span></span><br><span class="line"><span class="number">1684</span> <span class="number">1807</span> <span class="number">55</span></span><br><span class="line"><span class="number">1622</span> <span class="number">1746</span> <span class="number">149</span></span><br><span class="line"><span class="number">170</span> <span class="number">1839</span> <span class="number">142</span></span><br><span class="line"><span class="number">1234</span> <span class="number">2035</span> <span class="number">132</span></span><br><span class="line"><span class="number">3045</span> <span class="number">3065</span> <span class="number">151</span></span><br><span class="line"><span class="number">1832</span> <span class="number">2659</span> <span class="number">2</span></span><br><span class="line"><span class="number">2800</span> <span class="number">3045</span> <span class="number">110</span></span><br><span class="line"><span class="number">56</span> <span class="number">1396</span> <span class="number">135</span></span><br><span class="line"><span class="number">2119</span> <span class="number">3050</span> <span class="number">140</span></span><br><span class="line"><span class="number">218</span> <span class="number">299</span> <span class="number">118</span></span><br><span class="line"><span class="number">1911</span> <span class="number">2022</span> <span class="number">41</span></span><br><span class="line"><span class="number">1737</span> <span class="number">2205</span> <span class="number">137</span></span><br><span class="line"><span class="number">2694</span> <span class="number">2728</span> <span class="number">27</span></span><br><span class="line"><span class="number">1661</span> <span class="number">2797</span> <span class="number">72</span></span><br><span class="line"><span class="number">1662</span> <span class="number">2828</span> <span class="number">131</span></span><br><span class="line"><span class="number">49</span> <span class="number">390</span> <span class="number">146</span></span><br><span class="line"><span class="number">2206</span> <span class="number">2350</span> <span class="number">3</span></span><br><span class="line"><span class="number">293</span> <span class="number">331</span> <span class="number">10</span></span><br><span class="line"><span class="number">1784</span> <span class="number">2204</span> <span class="number">47</span></span><br><span class="line"><span class="number">43</span> <span class="number">192</span> <span class="number">74</span></span><br><span class="line"><span class="number">596</span> <span class="number">769</span> <span class="number">46</span></span><br><span class="line"><span class="number">2109</span> <span class="number">2766</span> <span class="number">144</span></span><br><span class="line"><span class="number">2992</span> <span class="number">3050</span> <span class="number">22</span></span><br><span class="line"><span class="number">2381</span> <span class="number">3024</span> <span class="number">123</span></span><br><span class="line"><span class="number">2156</span> <span class="number">2873</span> <span class="number">107</span></span><br><span class="line"><span class="number">67</span> <span class="number">1236</span> <span class="number">67</span></span><br><span class="line"><span class="number">717</span> <span class="number">726</span> <span class="number">98</span></span><br><span class="line"><span class="number">2357</span> <span class="number">2483</span> <span class="number">4</span></span><br><span class="line"><span class="number">211</span> <span class="number">686</span> <span class="number">100</span></span><br><span class="line"><span class="number">1506</span> <span class="number">2983</span> <span class="number">116</span></span><br><span class="line"><span class="number">1196</span> <span class="number">1301</span> <span class="number">77</span></span><br><span class="line">output:<span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 405</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dist[N][N], dp[N][N], n, m, q, t, s, ans;</span><br><span class="line"><span class="type">int</span> rest[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, p;</span><br><span class="line">&#125; course[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;my.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q &gt;&gt; t &gt;&gt; s;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        dist[a][b] = dist[b][a] = <span class="built_in">min</span>(dist[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        course[i].a = a, course[i].b = b, course[i].p = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dist[<span class="number">1</span>][course[i].p] &lt;= course[i].a) &#123;</span><br><span class="line">            rest[<span class="number">1</span>][i] = <span class="built_in">min</span>(course[i].a - dist[<span class="number">1</span>][course[i].p], s);</span><br><span class="line">            <span class="keyword">if</span> (t - (dist[course[i].p][<span class="number">1</span>] + course[i].b) + rest[<span class="number">1</span>][i] &gt;= s) &#123;</span><br><span class="line">                ++dp[<span class="number">1</span>][course[i].p];</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[<span class="number">1</span>][course[i].p]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= q; ++j)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= q; ++k)</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][course[k].p] &amp;&amp; dist[course[k].p][course[j].p] + course[k].b &lt;= course[j].a) &#123;</span><br><span class="line">                    <span class="type">int</span> restT = <span class="built_in">max</span>(course[j].a - course[k].b - dist[course[k].p][<span class="number">1</span>] - dist[<span class="number">1</span>][course[j].p], <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (course[j].b + dist[course[j].p][<span class="number">1</span>] &lt;= t &amp;&amp; (t - course[j].b - dist[course[j].p][<span class="number">1</span>]) + restT + rest[i - <span class="number">1</span>][k] &gt;= s) &#123;</span><br><span class="line">                        dp[i][course[j].p] = <span class="built_in">max</span>(dp[i][course[j].p], dp[i - <span class="number">1</span>][course[k].p] + <span class="number">1</span>);</span><br><span class="line">                        rest[i][j] = <span class="built_in">min</span>(s, <span class="built_in">max</span>(rest[i][j], rest[i - <span class="number">1</span>][k] + restT));</span><br><span class="line">                        ans = <span class="built_in">max</span>(ans, dp[i][course[j].p]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对拍代码，生成的不是一张图而是一棵树，没有判断过不是树的情况</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> random(a, b) ((a)+rand()%((b)-(a)+1))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dsu[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">int</span> mapp[<span class="number">10000005</span>];</span><br><span class="line"><span class="type">bool</span> st[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;input.txt&quot;</span>,ios::trunc)</span></span>;</span><br><span class="line">    <span class="comment">//ofstream fout(&quot;input.txt&quot;,ios::app);</span></span><br><span class="line">    <span class="comment">//fout.seekp( 0, ios::end);</span></span><br><span class="line">    <span class="type">int</span> q = <span class="built_in">random</span>(<span class="number">1</span>,n<span class="number">-1</span>),t = <span class="built_in">random</span>(<span class="number">3</span>,<span class="number">10004</span>);</span><br><span class="line">    <span class="type">int</span> s = <span class="built_in">random</span>(<span class="number">0</span>,t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">2</span>; --i) &#123;</span><br><span class="line">        dsu[i] = <span class="built_in">random</span>(<span class="number">1</span>, i - <span class="number">1</span>);<span class="comment">//生成一颗以1为根节点的树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) mapp[i] = i;</span><br><span class="line">    <span class="comment">//打印树，必要可以随机边权</span></span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt; n<span class="number">-1</span>&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;q&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;t&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;s&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;endl;</span><br><span class="line">    fout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt; n<span class="number">-1</span>&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;q&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;t&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;s&lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="built_in">random</span>(<span class="number">1</span>,<span class="number">104</span>);</span><br><span class="line">        cout &lt;&lt; mapp[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; mapp[dsu[i]] &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;temp &lt;&lt;endl;</span><br><span class="line">        fout &lt;&lt; mapp[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; mapp[dsu[i]] &lt;&lt; <span class="string">&#x27; &#x27;</span>&lt;&lt;temp&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=q;++i)&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">random</span>(<span class="number">2</span>,n);</span><br><span class="line">        <span class="keyword">while</span>(st[p])p = <span class="built_in">random</span>(<span class="number">2</span>,n);</span><br><span class="line">        <span class="type">int</span> a = <span class="built_in">random</span>(<span class="number">1</span>,t<span class="number">-2</span>);</span><br><span class="line">        <span class="type">int</span> b = <span class="built_in">random</span>(a+<span class="number">1</span>,t<span class="number">-1</span>);</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">        fout&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_dataset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">random</span>(<span class="number">2</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--) <span class="built_in">build</span>(n);</span><br><span class="line">    <span class="comment">//::getchar();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">create_dataset</span>();</span><br><span class="line">    <span class="comment">//system(&quot;standDP.exe &lt; input.txt &gt; stand.txt&quot;);</span></span><br><span class="line">    <span class="comment">//system(&quot;myDP.exe &lt; input.txt &gt; my.txt&quot;);</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;stand.exe &lt; input.txt&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;my.exe &lt; input.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;fc stand.txt my.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> tot)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++ ) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;正在运行第&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;个数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">work</span>())&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;出错了\n&quot;</span>;</span><br><span class="line">            <span class="built_in">getchar</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="comment">//work(); </span></span><br><span class="line">    <span class="built_in">dp</span>(<span class="number">512</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Done&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题算不上太难，但因为实现细节有很多，算上Floyd一共做了3次dp，补题的时候包括写对拍程序一共做了两个晚上，每次对拍都会出现不少没有考虑到的情况，第一次的时候没有考虑到存在中途回去睡觉可以是最优解的情况，之后的几次都是在代码的细节上出错，比如<code>dp[i][course[j].p]</code>写成<code>dp[i][j]</code>等，而且是在有clion的静态代码分析的情况下写了这么久，比赛时devc++没有分析和代码补全功能，所以在那种环境下更有可能没处理好拿好几次罚时。<br><a name="zkicg"></a></p><h1 id="G-Puzzle-Kusabi"><a href="#G-Puzzle-Kusabi" class="headerlink" title="G. Puzzle: Kusabi"></a>G. Puzzle: Kusabi</h1><p><img src="/2023/08/19/20thZJCPC/PuzzleKusabi1.png" alt="PuzzleKusabi1"><br><img src="/2023/08/19/20thZJCPC/PuzzleKusabi.png" alt="PuzzleKusabi"><br></p><p><img src="/2023/08/19/20thZJCPC/PuzzleKusabi2.png" alt="PuzzleKusabi2"></p><p>Grammy是个拼图高手。今天，她正在玩“Kusabi”拼图的变体。在这个变体中，有一棵有根的树，上面有一些汉字。树的根是顶点1，没有标记。有标记的顶点可以有“长”、“短”或“同”的符号。其目标是将所有标记的顶点连接成对，以便:<br>每个标记顶点通过标记它们之间的最短路径上的每条边连接到另一个标记顶点<br>字符“长”的顶点与根之间的距离必须比对应点到根的距离长。<br>字符“短”的顶点与根之间的距离必须比对应点到根的距离短。<br>字符“同”的顶点与根之间的距离必须与对应点到根的距离相同。<br>树上的每一条边最多只能标记一次。<br>左图展示了一个只有条件的可行谜题，右图展示了一个可行的解题方法。<br>Grammy当然知道如何解决这个难题，但她决定给你一个小测验。请解开这个谜题。<br>输入：<br>第一行包含一个整数n(1<n<10^5)，表示树上的顶点数。<br>接下来的n-1行中的每一行都包含两个整数i，$p_i$和字符串$t_i(t_i\in \left \{ chang,duan,tong,- \right \} )$表示在$p_i$和i之间有一条边，以及顶点的类型I是$t_i$”_”表示未标记顶点i)。保证i是按递增顺序给出的。还保证至少有一个标记的顶点。<br>输出：<br>如果解决方案不存在，则在单行上输出“NO”<br>否则，在第一行输出“YES”，然后输出几行，每行包含两个整数Ui，Vi，表示解决方案中的一对连接顶点。如果有多个解，输出任意一个。<br>已通过此<a href="https://qoj.ac/contest/1221/problem/6396">oj</a>的评测<br>2023.08.22</n<10^5)，表示树上的顶点数。<br></p><p>贪心题：<br>1.显然总的标记为Tong的数量必须为偶数，Chang和Duan数量一定相同<br>2.标记为Tong的一定和相同深度的配对，标记为Chang的深度为第i深的一定和深度为第i深的标记为Duan的配对，如果配不上则需要考虑第3条贪心策略是不是无解，证明：<br>$S_{Duan} = \left \{…i…j…  \right \} ,S_{Chang} = \left \{…i…j…  \right \} $<br>假设没有按照这个规则配对，则必有“Duan”的i和“Chang”的j配对（i小于j）,可以发现“Duan”的j号点所对应的“Chang”被占，“Duan”的j号点又不一定可以与小于j的“Chang”的点配对，也就是说选择变少了，如果“Duan”的j号位的深度大于“Chang”的点中的j-1号位，那么就无法配对，最优性不如原先的假设，所以按照之前的排法是最优的。<br>3.对于一棵子树，最多只能留出一个点无法与子树内的其他点配对，去和别的子树上的点去配对，否则无解，这个也是显然的，因为要去到别的子树的最短路，有一条边是必须要经过的：子树的根节点到这颗子树的父亲节点的这条边，因为每条边只能经过一次，所以最多只能保留一个结点；还有一种可能无解是考虑当前子树的剩下那个点不是给“Tong”节点并且“Tong”的个数是奇数，那么一定无解<br>4.保留的一个结点的选择：<br>对于“Chang”和“Duan”这种节点有剩的：“Chang”结点剩最长的，因为这样可以选择的“Duan”结点就会最多，“Duan”也是同理，应该剩最短的<br>对于“Tong”这种结点有剩的：保留的结点只要选择不能配对的就可以，对深度没有要求，因为不管怎样都一定要和深度一样的配对，实现方法很简单，对所有没有配对的“Tong”结点小到大排序，排完之后两两配对，如果剩下最后一个配不上或者两两配对时深度不一样就将这个点存为剩下的点，注意无解的情况：考虑这棵树最后是不是还保留了一个“Tong”结点，如果是，那么也是无解的<br><img src="/2023/08/19/20thZJCPC/PuzzleKusabi3.png" alt="PuzzleKusabi3" style="zoom:27%;"><img src="/2023/08/19/20thZJCPC/PuzzleKusabi4.png" alt="PuzzleKusabi4" style="zoom:25%;">红点表示“Tong”蓝点表示不是“Tong”的标记点，第一张图表明第一种无解情况，第二张表明第二种无解情况，注意并不需要特地判断当前子树是不是存在两个及以上的无法配对的情况，证明需要根据奇偶性分四类讨论：<br>1.假设当前子树剩的是偶数个未配对的“Tong”结点，并且根节点的父节点除当前子树以外所包含的“Tong”结点个数是奇数，那么总共加起来一定是奇数，一定会留下一个交给其他子树配对，参考第二张图去掉左上那个节点的情况；<br>2.假设当前子树剩的是偶数个未配对的“Tong”结点，并且根节点的父节点除当前子树以外所包含的“Tong”结点个数是偶数，那么因为当前子树会尝试和其他不是该子树上的“Tong”节点配对，不管怎么配对于根节点的父节点来说都是配不完的，一定会留下一个交给其他子树配对；<br>3.假设当前子树剩的是奇数个未配对的“Tong”结点，并且根节点的父节点除当前子树以外所包含的“Tong”结点个数是奇数，那么如果配的上就可以配成合法情况（剩0个），如果配不上也会剩下偶数个，也就变成了第一第二种情况<br>4.假设当前子树剩的是奇数个未配对的“Tong”结点，并且根节点的父节点除当前子树以外所包含的“Tong”结点个数是偶数，同第一种情况，那么总共加起来一定是奇数，一定会留下一个交给其他子树配对；<br>所以观察无解的情况都是会剩下一个和其他子树上的节点配对，所以可以有由叶子结点归纳，一步一步扩大子树的大小直到变成一整棵树都是这样的情况，由于到一整棵树还是会剩一个，这种情况就是第二个无解情况，所以不需要考虑<br>5.这种贪心决策的路径一定不会重叠，证明用类似树形dp的思想，可以从最原始的情况一步步归纳：<br>最底层：当前只有叶子结点时，显然不用考虑，<br>往上一层：将所有同一个父结点的叶子结点连接与父结点组成子树，那么就算是前面讨论的有剩余的未配对结点，那也是最多选出一个通过父结点和其他子树相连，也就相当于是父结点存在一个标记为“Chang”“Duan”“Tong”中的任意一个，他的儿子结点因为已经配对完就不用考虑，所以不会重叠<br>归纳：对父结点和它对应的祖先组成子树，这个子树显然也可以看成第二层的情况，也不会出现重叠<br>所以整个情况合起来路径不会重叠,因此这种贪心策略是正确的<br>代码的实现：<br><code>d[u]</code>数组：存储当前结点对应的深度<br><code>ver[u]</code>数组：存储当前结点对应的种类，0表示不是特殊点，1-3表示“Duan”“Chang”“Tong”，三种状态<br><code>remain[u]</code>数组：存储当前结点的儿子们有无剩余的未配对的结点，数值同ver数组<br><code>num[u][i]</code>数组：存储当前u结点下包括自身的所有状态为i的结点个数<br><code>edge[N]</code>数组：邻接表存图<br><code>v[i]</code>vector数组：存储当前子树所有没有配对的结点，并可由size()统计个数<br><code>flag</code>变量：表示当前是否有无解的状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> d[N], ver[N], remain[N], num[N][<span class="number">4</span>], n;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line">vector&lt;PII&gt; ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> par)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v[<span class="number">4</span>];</span><br><span class="line">    d[u] = d[par] + <span class="number">1</span>;<span class="comment">//计算深度</span></span><br><span class="line">    ++num[u][ver[u]];<span class="comment">//计算当前u结点的转态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) <span class="keyword">if</span> (ver[u] == i)v[i].<span class="built_in">push_back</span>(u);<span class="comment">//计算当前结点属于哪个状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ne: edge[u]) &#123;<span class="comment">//递归儿子结点</span></span><br><span class="line">        <span class="keyword">if</span> (ne == par) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(ne, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (ver[remain[ne]] == i) v[i].<span class="built_in">push_back</span>(remain[ne]);<span class="comment">//存储儿子结点的状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) num[u][i] += num[ne][i];<span class="comment">//存储所有i状态的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;<span class="comment">//判断有无解，无解就不用再继续运行</span></span><br><span class="line">    <span class="comment">//特判两种无解情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(num[u][<span class="number">1</span>] - num[u][<span class="number">2</span>]) &gt;= <span class="number">2</span>) &#123;<span class="comment">//如果当前“Chang”和“Duan”个数相差大于1就说明无解</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num[u][<span class="number">1</span>] != num[u][<span class="number">2</span>] &amp;&amp; (num[u][<span class="number">3</span>] &amp; <span class="number">1</span>)) &#123;<span class="comment">//如果当前子树的剩下那个点不是给“Tong”节点并且“Tong”的个数是奇数，那么一定无解</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i)</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> <span class="type">int</span> u, <span class="type">const</span> <span class="type">int</span> v) &#123; <span class="keyword">return</span> d[u] &lt; d[v]; &#125;);</span><br><span class="line">    <span class="type">int</span> v1 = (<span class="type">int</span>) v[<span class="number">1</span>].<span class="built_in">size</span>(), v2 = (<span class="type">int</span>) v[<span class="number">2</span>].<span class="built_in">size</span>(), v3 = (<span class="type">int</span>) v[<span class="number">3</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//分类遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v3; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == v3 - <span class="number">1</span>) &#123;</span><br><span class="line">            remain[u] = v[<span class="number">3</span>][i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d[v[<span class="number">3</span>][i]] != d[v[<span class="number">3</span>][i + <span class="number">1</span>]]) remain[u] = v[<span class="number">3</span>][i++];</span><br><span class="line">        ans.<span class="built_in">emplace_back</span>(v[<span class="number">3</span>][i], v[<span class="number">3</span>][i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num[u][<span class="number">1</span>] &gt; num[u][<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="type">int</span> l = v1 - <span class="number">1</span>, r = v2 - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> || r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &gt;= <span class="number">0</span> &amp;&amp; d[v[<span class="number">1</span>][l]] &lt; d[v[<span class="number">2</span>][r]]) &#123;</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(v[<span class="number">1</span>][l--], v[<span class="number">2</span>][r--]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!remain[u] &amp;&amp; l &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                remain[u] = v[<span class="number">1</span>][l--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; v1 || r &lt; v2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; v1 &amp;&amp; r &lt; v2 &amp;&amp; d[v[<span class="number">1</span>][l]] &lt; d[v[<span class="number">2</span>][r]]) &#123;</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(v[<span class="number">1</span>][l++], v[<span class="number">2</span>][r++]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!remain[u] &amp;&amp; r &lt; v2) &#123;</span><br><span class="line">                remain[u] = v[<span class="number">2</span>][r++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v), edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>)ver[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)ver[u] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;T&#x27;</span>)ver[u] = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!flag || remain[<span class="number">1</span>]) cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;<span class="comment">//注意remain[1]里面有东西也是无解的</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it: ans)</span><br><span class="line">            cout &lt;&lt; it.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树上贪心问题，这题的贪心策略并不算好想，也融合了树的遍历，树形dp的思想，由于树这种结构天然的适合dp和递归，所以题目就算没有要用树形dp去解也要考虑是否可以利用这个特殊的结构去实现算法，这道题的坑点也很多，像没看到每条边只能经过一次这个条件就会误以为是很简单的一道贪心题，最后关于“Tong”结点的处理也不好想到，很难在短时间内验证正确性<br><a name="wQHBt"></a></p><h1 id="H-Puzzle-Tapa"><a href="#H-Puzzle-Tapa" class="headerlink" title="H. Puzzle: Tapa"></a><strong>H. Puzzle: Tapa</strong></h1><p><img src="/2023/08/19/20thZJCPC/PuzzleTapa1.png" alt="PuzzleTapa1"><br><img src="/2023/08/19/20thZJCPC/PuzzleTapa2.png" alt="PuzzleTapa2"></p><p>翻译：<br>Grammy是解谜大师，今天，她正在玩一个“Tapa”拼图的变体。在这个变体中，有 (2n − 1)×(2m−1)矩形网格上的n×m个线索。所有线索都位于单元格（i，j）上，其中i，j都很奇怪。每条线索都是一个等于或比周围单元格数小1的数字线索。具体来说，网格角落上的线索可以是2条或3条，网格边缘上的线索可以是4或5并且网格中心上的线索可以是7或8。目标是对一些格子进行遮光，例如即：<br>•所有线索单元格都未加阴影。<br>•每个线索单元格表示其周围连续阴影单元格的数量。<br>左上图显示了一个可能的5×5网格，只有线索，右上图显示了可能的解决谜题的方法，底部的图片显示了一个错误的谜题解决方案，因为阴影4周围的单元格是不连续的。<br>Grammy肯定知道如何解决这个难题，但她决定给你一个小测验。请解开这个谜题。<br>输入<br>第一行包含两个整数n，m（2≤n，m≤50），表示网格的大小。<br>接下来的2n−1行中的每一行都包含2m−1个字符，表示具有给定线索的网格。点（’.’）<br>表示没有线索的单元格，而数字表示单元格上的线索。它保证了<br>奇数行和奇数列的交叉点有一条线索，所有其他单元格都不包含任何线索。<br>输出 <br>如果解决方案不存在，则在单行上输出“NO”。<br>否则，在第一行输出“YES”，然后输出2n−1行，每行包含2m−1个字符，<br>表示谜题的答案。格式类似于输入网格，但您应该标记<br>用“#”对单元格进行着色。换句话说，输出中的点（’.’）表示一个没有线索的无阴影单元格，<br>（’#’）表示带阴影的单元格，数字表示单元格上的线索。<br>如果有多个解决方案，请输出任何一种解决方案。<br>已通过此<a href="https://qoj.ac/contest/1221/problem/6398">oj</a>的评测<br>2023.08.26<br>大致意思就是扫雷，数字表示周围连续的雷的数量，判断有无解，如果有解就输出任意一种，注意涂色的点必须是联通的。</p><p>这题的通过率低到离谱，是除了只有一队通过的C题以外最低的一题，原因可能是题目只说了每个线索单元格表示其周围连续阴影单元格的数量，没有说明要涂色的点必须是联通的，像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3.2</span><span class="number">.3</span></span><br><span class="line">.....</span><br><span class="line"><span class="number">5.7</span><span class="number">.5</span></span><br><span class="line">.....</span><br><span class="line"><span class="number">3.5</span><span class="number">.3</span></span><br><span class="line">output:</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>如果理解为涂色点可以不联通只要最多的联通数量等于给的线索那么输出会是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span>#<span class="number">2</span>#<span class="number">3</span></span><br><span class="line">##.##</span><br><span class="line"><span class="number">5</span>#<span class="number">7</span>#<span class="number">5</span></span><br><span class="line">#####</span><br><span class="line"><span class="number">3.5</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>由于要求连续，所以有一个很重要的结论：<br>如果合法那么最外圈（除去数字的最外圈）一定全是’#’，原因很简单因为要求连续，像上面的例子给出的就是不合法的，只有最外圈全是’#’才能保证数字的最外圈每个阴影都是连续的。<br>正难则反，假设现在全部都是阴影，如果能去掉一些阴影来满足条件那么就是合法的。将这个想象成一张图，没有’#’的相邻两个数字，即这两个数字周围允许有空白（即不是3,5,8）就是存在一条边，相邻才会有一条边，并且一定不会存在一行像3.4.5.4.3这样隔一列的合法情况，那也就是说奇数行和偶数行可以被两两匹配，就很容易联想到跑一次二分图的最大匹配，一边的点集全是奇数行列，一边的点集全是偶数行列，如果做得到完全匹配那么就是一种合法情况。然后再结合上面的结论可以枚举出二分图的边集：如果都是在最外层的或者都是在里面的并且相邻那么这两个点之间就存在一条边，跑一遍匈牙利算法如果是完全匹配那么就是合法的。<br>需要注意的是二分图不一定的两个集合不是必须按照点来划分，这道题只要能够正确描述点与点之间的关系并且可以判断是不是完全匹配就可以。代码中是将点的集合重新分配一个编号，将这个编号与编号之间的关系作为一条边建二分图，而且因为是用编号映射点，所以：<br>1.下标是从0开始的，与正常的模板相比，数组的初始化一定要初始化成-1，如果没有初始化是0那么就是说明这个下标与第0个点匹配，这样就会出错，并且条件的判断也要从!=0变成!=-1<br>2.输出的时候要考虑映射关系<br>用邻接表存储编号的数组一定要开到1500左右，因为n和m最大都是50，两两组合有50*49/2，所以要开的足够大才不会re</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1505</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[N];</span><br><span class="line"><span class="type">int</span> n, m, v[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line">vector&lt;PII&gt; vl, vr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    st[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y: edge[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[y] == <span class="number">-1</span> || (!st[v[y]] &amp;&amp; <span class="built_in">find</span>(v[y]))) &#123;</span><br><span class="line">            v[y] = x;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">match</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">-1</span>, <span class="keyword">sizeof</span> v);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i)) ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">mat</span><span class="params">(<span class="number">2</span> * n - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s: mat) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c: s)</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) c = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="type">char</span> t = mat[<span class="number">2</span> * i][<span class="number">2</span> * j];</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="string">&#x27;3&#x27;</span> || t == <span class="string">&#x27;5&#x27;</span> || t == <span class="string">&#x27;8&#x27;</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span> == <span class="number">0</span>)vl.<span class="built_in">emplace_back</span>(i, j);</span><br><span class="line">            <span class="keyword">else</span> vr.<span class="built_in">emplace_back</span>(i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> v1 = (<span class="type">int</span>) vl.<span class="built_in">size</span>(), v2 = (<span class="type">int</span>) vr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (v1 != v2) <span class="keyword">return</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>, <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x1, y1] = vl[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; v2; ++j) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x2, y2] = vr[j];</span><br><span class="line">            <span class="type">int</span> dist = <span class="built_in">abs</span>(x1 - x2) + <span class="built_in">abs</span>(y1 - y2);</span><br><span class="line">            <span class="type">bool</span> isBoundary = (x1 == <span class="number">0</span> &amp;&amp; x2 == <span class="number">0</span>) || (x1 == n - <span class="number">1</span> &amp;&amp; x2 == n - <span class="number">1</span>) ||</span><br><span class="line">                              (y1 == <span class="number">0</span> &amp;&amp; y2 == <span class="number">0</span>) || (y1 == m - <span class="number">1</span> &amp;&amp; y2 == m - <span class="number">1</span>);</span><br><span class="line">            <span class="type">bool</span> isIntern = mat[<span class="number">2</span> * x1][<span class="number">2</span> * y1] == <span class="string">&#x27;7&#x27;</span> &amp;&amp; mat[<span class="number">2</span> * x2][<span class="number">2</span> * y2] == <span class="string">&#x27;7&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (dist == <span class="number">1</span> &amp;&amp; (isBoundary || isIntern)) edge[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">match</span>(v1) != v1) cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v2; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [x2, y2] = vr[i];</span><br><span class="line">            <span class="type">int</span> j = v[i];</span><br><span class="line">            <span class="keyword">auto</span> [x1, y1] = vl[j];</span><br><span class="line">            mat[x1 + x2][y1 + y2] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s: mat) cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct MBM &#123;</span></span><br><span class="line"><span class="comment">    int L;</span></span><br><span class="line"><span class="comment">    vector&lt;int&gt; match, seen;</span></span><br><span class="line"><span class="comment">    vector&lt;vector&lt;int&gt; &gt; g;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    MBM(int L, int R) : L(L), match(R), seen(R), g(L) &#123;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    void add_edge(int l, int r) &#123; g[l].push_back(r); &#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    bool dfs(int u) &#123;</span></span><br><span class="line"><span class="comment">        return any_of(g[u].begin(), g[u].end(), [&amp;](int v) &#123;</span></span><br><span class="line"><span class="comment">            if (seen[v]++ == 0 &amp;&amp; (match[v] == -1 || dfs(match[v]))) &#123;</span></span><br><span class="line"><span class="comment">                match[v] = u;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int max_matching() &#123;</span></span><br><span class="line"><span class="comment">        int ans = 0;</span></span><br><span class="line"><span class="comment">        fill(match.begin(), match.end(), -1);</span></span><br><span class="line"><span class="comment">        for (int u = 0; u &lt; L; ++u) &#123;</span></span><br><span class="line"><span class="comment">            fill(seen.begin(), seen.end(), 0); </span></span><br><span class="line"><span class="comment">            ans += dfs(u);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return ans;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以像注释里的代码一样定义一个结构体，将所有的初始化，数组长度在结构体初始化的时候申请对应的大小就可以保证空间也不会被浪费。<br>其实还是很套路的一道题，如果题目做多了就会发现棋盘矩阵其实天生的适合划分成两个点集，这些题基本上程序的框架是一样的，的比如像这样黑白染色：<br><img src="/2023/08/19/20thZJCPC/PuzzleTapa3.png" alt="PuzzleTapa3" style="zoom: 50%;"><br>行号加列号是偶数就染黑，奇数就染白，就可以变成黑格是一类点，白格是一类点，黑白相邻格子之间连上一条边，就可以解决这道棋盘覆盖问题：<br><img src="/2023/08/19/20thZJCPC/PuzzleTapa4.png" alt="PuzzleTapa4"></p><p><a name="IOCys"></a></p><h1 id="I-Equation-Discovering"><a href="#I-Equation-Discovering" class="headerlink" title="I. Equation Discovering"></a>I. Equation Discovering</h1><p><img src="/2023/08/19/20thZJCPC/IEquationDiscovering1.png" alt="IEquationDiscovering1"><br><img src="/2023/08/19/20thZJCPC/IEquationDiscovering2.png" alt="IEquationDiscovering2"></p><p>翻译：</p><p>Mika教授是一位计算机科学研究人员，他提出了以下问题:给定n对(x,y)，其中1≤n≤20,我们如何找到适用于所有对的控制方程y=f(x)?换句话说，他试图确定一个方程，该方程涉及二元运算符(+，-，x，÷)、一元运算符(sin，cos)、符号x和适用于所有给定对的括号，例如y=x<em>x÷sin(x)或y=x</em>(x+x÷x)。</p><p>为了生成所有有效的方程，我们定义了一个上下文无关语法，如下所示:</p><p>1.起始符号为S。</p><p>2.S→S+S | S-S</p><p>3.S→SxS | S+S</p><p>4.S→sin(S) | cos(S)</p><p>5.S→(S) l x</p><p>然而，为了防止过拟合，我们将方程的复杂度限制为小于或等于9，其中复杂度定义为二元运算符(+，-，x，÷)数量的两倍加上方程中一元运算符(sin，cos)数量的一倍。例如，方程x+(x+x<em>x)的复杂度为6，而x</em>sin()的复杂程度为3。只有复杂度小于或等于9的方程才会被认为是正确的。</p><p>输入</p><p>第一行包含一个整数n(1≤n≤20)，表示要拟合的(x，y)对的数量。以下n行，每行两个实数r，y(zl，&lt;103)，小数点后正好有六位数字，表示(x，y)对。</p><p>x的值保证是准确的，我们使用一些有效的方程来生成y的值，然后将其四舍五入到六位数。</p><p>输出</p><p>输出只有一行表达式f，由’+’、-’、*’(对于x)、/’(对于÷)、’sin’、’cos’、’x’、(’和)’组成。</p><p>如果您的答案满足以下条件，则视为正确:</p><p>1.表达式f是使用前面描述的上下文无关语法生成的，并且根据该语法是有效的。</p><p>2表达式f的复杂度不超过9，并且长度不超过1000个字符。</p><p>3.对于每个(z，y)对，f(z)和g之间的绝对或相对误差不大于10</p><p>3。即≤10-3</p><p>4.在计算除法运算时，被除数的绝对值必须不小于0.01。</p><p>留坑待填</p><p><a name="xiJVw"></a></p><h1 id="赛后总结"><a href="#赛后总结" class="headerlink" title="赛后总结"></a>赛后总结</h1><p>…没去颁奖现场也没找到获奖率的通知，文件里面只写了这些：<br>本届竞赛按本科组、专科组分别进行评奖和设奖，根据每队答题数量及解题时长进行排名。为与国际竞赛获奖名称接轨，特设置奖项如下：<br>颁发金、银、铜奖（牌）：若干名；<br>颁发最佳女队奖（牌）：1名；要求获等级奖的参赛队中，应有3名女生组队，则有资格参评此奖项；<br>颁发顽强拼搏奖（牌）:1名；<br>要求竞赛中表现特别顽强的队伍，如提交某题次数最多、在比赛结束前最后成功通过一题的队伍等，都有可能获此奖项；<br>颁发高校优秀组织奖（牌）：若干名。<br>上述获奖比例按浙江省大学生科技竞赛委员会相关规定执行，奖牌颁发给参赛高校，获奖证书颁发给获奖师生本人。<br>如果按2014年的评奖规则：<br>本届竞赛按本科组、大专组分别进行评奖和设奖，根据每队解答竞赛题目的数目多少及解题程序算式所需时间长短进行排名。评定以下奖项：<br>特等奖：1队（可空缺），颁发奖杯、证书；<br>一等奖：8%参赛队，颁发金牌、证书；<br>二等奖：15%参赛队，颁发银牌、证书；<br>三等奖：25%参赛队，颁发铜牌、证书；<br>特别奖：最佳女队奖（获等级奖的参赛队中，应有3名女生组队，则有资格参评此奖项）、顽强拼搏奖（竞赛中表现特别顽强的队伍，如提交某题次数最多、在比赛结束前最后成功通过一题的队伍等，都有可能获此奖项）、最佳组织奖（颁发给积极参与竞赛的学校）若干，颁发奖牌。<br>优胜奖：未获等级奖和特别奖，但在比赛中至少成功解答一题的队。无证书。<br>成功参赛奖：未获上述奖项的参赛。无证书。</p><p>比赛时做了AEFM四道题，按照这个规则来看，如果要拿铜必须要做得快，银牌需要做出K题，做出G题稳银，再做出H题稳金。<br>这次打铁也属于是意料之中了，队友之间的配合明显不算好，可以看出做简单题花时间检查比直接交上去赌对而错了罚时的收益高，但是在做F题的时候仍然出现了一次罚时，这是因为我没有看清题目每次查询都会返回绝对值而不是差值，导致第一次在设计程序的时候总体思路就错了，最后我拍了几组错误的输出发现没错就提交罚时一次，在发现题目看错了又重新设计程序，就因为一个绝对值导致思路和之前的完全不一样，算上罚时总共浪费了一个多小时，导致来不及细想K题最后只解出了四道题，如果以现在补题时的能力来看，前面做的快，留出充足的时间是有可能写五道题拿银。但是金牌的话G题的难度过大不大可能在有限的时间内想出完全正确的贪心，H题更不可能联想到建模成二分图跑最大匹配(其实棋盘建模成二分图是比较套路的做法)<br>总的来说大一没有拿牌还是能力和比赛经验不够，练得太少做不到将想法写成程序，在补题的时候还只是第一次做这种dp，比赛时就更弱了，在写M题的时候写个sort的比较函数都要写半天，最后是一个队友用STL里面的pair加优先队列做出来的。并且英语也很重要，平时英文题也没有练过，比赛时三个人在做题的时候原本的想法是三个人分开看题，结果甚至查英文字典都看不懂题目，都是看哪题通过率高的没写就三个人一起翻译题目，这样做明显降低了读题速度，一直到比赛结束都没看K题以后的题目。并且F题题面都加粗了绝对值但是读完还是忘了…其实在英语题练多了后去打比赛，可以在做完签到题后英语好的两个人读题，一个人从前往后一个人从后往前，另一个在devc++上先打好缺省源顺便看看榜单里面哪一题做的人多，这样可以节省不少时间。<br><a name="QJpMQ"></a></p><h2 id="比赛的排名规则"><a href="#比赛的排名规则" class="headerlink" title="比赛的排名规则"></a>比赛的排名规则</h2><p>首先按解题数量排序，每道题权值一样，解题数量越多的排在前面，题数一样多的队伍按时间排（表中的score），时间的具体计算是：每道题第一次ac的时间（单位为分钟）的总和加上已ac的题目中先前提交wa的次数<em>20。像我们队解出AEMF的时间分别是比赛开始后的10，49，95，210，其中F题罚时一次，那么总时间就是10+49+95+210+20</em>1 = 384,所以四题里用时比我们长的都排在后面<br><a name="yjSUR"></a></p><h2 id="终榜"><a href="#终榜" class="headerlink" title="终榜"></a><a href="https://acm.hznu.edu.cn/domjudge/scoreboard/">终榜</a></h2>]]></content>
      
      
      <categories>
          
          <category> ICPC省赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浙江 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法大赛2023-村庄</title>
      <link href="/2023/04/18/%E7%AE%97%E6%B3%95%E5%A4%A7%E8%B5%9B2023-%E6%9D%91%E5%BA%84/"/>
      <url>/2023/04/18/%E7%AE%97%E6%B3%95%E5%A4%A7%E8%B5%9B2023-%E6%9D%91%E5%BA%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/10/01/XQNDcgyW9wPuRmj.png" alt="image _4_.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>数据范围：<br>2 &lt;= N &lt;= 10^5<br>1 &lt;= K &lt;= M &lt;= 10^5<br>1 &lt;= ai &lt; bi &lt;= N<br>所有的村庄组合(ai, bi) 各不相同。<br><img src="https://s2.loli.net/2023/10/01/cXa2pktlq6SOAb3.png" alt="image.png" style="zoom:50%;"><br><img src="https://s2.loli.net/2023/10/01/Cbm4r62qlzaNpXW.png" alt="image _5_.png" style="zoom:50%;"><br>将村庄看成点，桥看成边，显然一开始给你的一定是所有的点都可以通过某条边直接或者间接相连，那么村庄的组合就是$C_{n}^{2} = \frac{n*(n-1)}{2} $，即选出两个村庄进行组合。去除一些边后问你毁了多少个组合。所以思路就是求连通块，计算每个连通块有多少个点，用组合数的公式进行计算还剩下多少个点，计算之后再减去总的村庄组合。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    ll a, b;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line">ll n, m, k, par[M], cnt, a[M];</span><br><span class="line">vector&lt;ll&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x] != x)par[x] = <span class="built_in">find</span>(par[x]);</span><br><span class="line">    <span class="keyword">return</span> par[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        ll a = e[i].a, b = e[i].b;</span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b) par[a] = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ll t = <span class="built_in">find</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (t != i)a[t]++;</span><br><span class="line">        <span class="comment">//如果父亲不是自己，那么和别人肯定有一条边联通，累加这个父节点连接的结点数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>)v.<span class="built_in">push_back</span>(a[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//如果该节点连了其他结点，那么就加上他自己压入vector里面</span></span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;t:v)&#123;<span class="comment">//遍历所有的连通块</span></span><br><span class="line">        res += t*(t<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll all = n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;all-res;<span class="comment">//总的数量减去连通块的数量就是减少的村庄组合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>), ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        ll ai, bi;</span><br><span class="line">        cin &gt;&gt; ai &gt;&gt; bi;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= k)<span class="keyword">continue</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        e[cnt].a = ai;</span><br><span class="line">        e[cnt].b = bi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; ++i)par[i] = i;</span><br><span class="line">    <span class="built_in">process</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 小比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2023算法大赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E-梅莉的市场经济学</title>
      <link href="/2022/12/29/E-%E6%A2%85%E8%8E%89%E7%9A%84%E5%B8%82%E5%9C%BA%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
      <url>/2022/12/29/E-%E6%A2%85%E8%8E%89%E7%9A%84%E5%B8%82%E5%9C%BA%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p><a name="9784768a"></a></p><h1 id="传智杯-5-初赛-E-梅莉的市场经济学"><a href="#传智杯-5-初赛-E-梅莉的市场经济学" class="headerlink" title="[传智杯 #5 初赛] E-梅莉的市场经济学"></a>[传智杯 #5 初赛] E-梅莉的市场经济学</h1><p>题目背景<br>梅莉这个学期选修了经济学。但是主修心理学的她实在不擅长经济领域的分析，为此她时常抱怨自己学不会，想退课。<br>但是如果现在退掉的话这学期的学分就不够啦，因此她根据“梦中”的经历，“胡诌”了一个简单到不现实的市场模型，并依据这个模型编起了 essay。为了方便地编出图表，她需要写一个程序来查询每个时刻的市场贸易差。<br>题目描述<br>市场每一天的贸易差可以视为一个有周期性规律的数列a:$\color{red}[0],\color{blue}[0, 1, 0, -1, 0],\color{red}[0, 1, 2, 1, 0, -1, -2, -1, 0], \color{blue}[0, 1, 2,3, 2, 1, 0, -1, -2, -3, -2, -1, 0]\dots$。具体而言，<em>a</em> 可以被分为无穷段，第 <em>i</em> 段的内容为 $\{0, 1,\cdots,i,i-1, \cdots,0, -1, \cdots,-i, -i+1,\cdots 0\}$如下图所示，是将a数列内的前一些点绘制在坐标轴上的情况：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/wrl89jka.png#id=sOQ4a&amp;originHeight=455&amp;originWidth=869&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt><br>现在梅莉对市场发起了 q次询问，每次她会给定一个 k，希望求出 $a_k$是多少。<br>输入格式</p><ul><li>第一行有一个正整数 q，表示询问次数。</li><li>接下来 q 行，每行一个正整数 k，描述每次询问。</li></ul><p>输出格式</p><ul><li>输出共 q行。对于每次询问，输出对应的结果。</li></ul><p>样例 #1<br>样例输入 #1<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1</span><br><span class="line">10</span><br><span class="line">100</span><br><span class="line">1000</span><br><span class="line">10000</span><br><span class="line">100000</span><br><span class="line">1000000</span><br><span class="line">10000000</span><br><span class="line">100000000</span><br></pre></td></tr></table></figure><br>样例输出 #1<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">6</span><br><span class="line">-9</span><br><span class="line">-11</span><br><span class="line">-128</span><br><span class="line">406</span><br><span class="line">1629</span><br><span class="line">5154</span><br></pre></td></tr></table></figure><br>提示<br>对于所有数据，有$1 \leq q \leq 10^5，1 \leq k \leq 4\times 10^{18}$。<br><a name="xd80F"></a></p><h1 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h1><p>对于这个数据规模，显然询问的次数是没有办法优化的，这就表明考虑最多的循环的次数至少有10^5。那么就算每次询问使用常数复杂度的方式也会超时，因为这个是一个一个区间的形式，每一个区间的长度是按照规律递增的，那么就可以考虑在最大和最小的区间内二分找。算上查询的O(n)复杂度为O(nlogn)左右，可以通过这个数据范围。<br>比较头疼的是这个规律以及他的上限应该定在哪一个位置比较合适。</p><div class="table-container"><table><thead><tr><th>峰值</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>长度</td><td>1</td><td>6</td><td>15</td><td>28</td><td>45</td></tr><tr><td>规律1</td><td>1</td><td>6</td><td>6+9</td><td>6+9+13</td><td>6+9+13+17</td></tr><tr><td>规律2</td><td>1</td><td>1+5</td><td>1+5+9</td><td>1+5+9+13</td><td>1+5+9+13+17</td></tr><tr><td>规律3<br>（等差求和，an = 1+4<em>n=4n+1<br>=&gt;<br>sn=(5+4n+1)</em>n/2+1=2n^2+3n+1）<br></td><td>1</td><td>2<em>1+3</em>1+1</td><td>2<em>4+3</em>2+1</td><td>2<em>9+3</em>3+1</td><td>2<em>16+3</em>4+1</td></tr></tbody></table></div><p>从表中不难得出规律：2n^2+3<em>n+1,但是在比赛的时候由于没有画表格，所以就只看出了递推关系：an-an-1 =4n+1,然后利用累加法（累加的时候一定要注意初始条件和结束条件以及一共累加了多少次），最后得出2 </em> (2 + n) * (n - 1) + n + 5;这个式子的右边最大要特别的考虑，因为</p><script type="math/tex; mode=display">1 \leq k \leq 4\times 10^{18}</script><p>因为是这个数据，可以计算出二分右边界要开到1.5*1e9左右，不然会出现死循环过不了最后几个点：</p><p>define MAX 1000000000时的情况:</p><p><img src="https://s2.loli.net/2023/09/25/bQJwV5OrTKteLAU.png" alt="image _2_.png"></p><p>但是MAX改到1500000000时就能ac</p><p>ac代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1500000000</span></span><br><span class="line"></span><br><span class="line">ll q, k, lb, n;</span><br><span class="line">ll pren;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getnum</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * (<span class="number">2</span> + n) * (n - <span class="number">1</span>) + n + <span class="number">5</span>;<span class="comment">//其实也可以写这个：2*n*n+3*n+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分找区间</span></span><br><span class="line"><span class="function">ll <span class="title">getindex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line">lb = <span class="number">0</span>;</span><br><span class="line">ll ub = MAX;</span><br><span class="line">ll ubnum = <span class="built_in">getnum</span>(ub);</span><br><span class="line">ll lbnum = <span class="built_in">getnum</span>(lb);</span><br><span class="line"><span class="keyword">while</span> (!(lbnum &lt;= k &amp;&amp; k &lt;= <span class="built_in">getnum</span>(lb + <span class="number">1</span>))) &#123;<span class="comment">//如果二分右边界不对的话这里就会死循环</span></span><br><span class="line">ll mid = (lb + ub) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getnum</span>(mid) &gt;= k) &#123;</span><br><span class="line">ub = mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lb = mid;</span><br><span class="line">&#125;</span><br><span class="line">ubnum = <span class="built_in">getnum</span>(ub);</span><br><span class="line">lbnum = <span class="built_in">getnum</span>(lb);</span><br><span class="line">&#125;</span><br><span class="line">pren = <span class="built_in">getnum</span>(lb);</span><br><span class="line">n = <span class="built_in">getnum</span>(lb + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> lb + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="comment">//包括首尾的话每个区间一共有6个特殊点</span></span><br><span class="line">ll top = <span class="built_in">getindex</span>();</span><br><span class="line">ll bottom = -top;</span><br><span class="line">ll zeroindex2 = (pren + n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">ll zeroindex1 = pren + <span class="number">1</span>;</span><br><span class="line">ll topindex = (zeroindex1 + zeroindex2) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">ll bottomindex = (zeroindex2 + n) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//k位于不同特殊点之间都有不一样的结果</span></span><br><span class="line"><span class="keyword">if</span> (zeroindex1 &lt; k &amp;&amp; k &lt; topindex) &#123;</span><br><span class="line">ans = k - zeroindex1;</span><br><span class="line">cout &lt;&lt; ans  &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (topindex &lt;= k &amp;&amp; k &lt; zeroindex2) &#123;</span><br><span class="line">ans = top - (k - topindex);</span><br><span class="line">cout &lt;&lt; ans  &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (zeroindex2 &lt; k &amp;&amp; k &lt; bottomindex) &#123;</span><br><span class="line">ans =  zeroindex2 - k;</span><br><span class="line">cout &lt;&lt;  ans &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottomindex &lt;= k &amp;&amp; k &lt; n) &#123;</span><br><span class="line">ans = bottom + (k - bottomindex);</span><br><span class="line">cout &lt;&lt; ans  &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这道题目的难点有三：求通项公式，二分的右边界以及一堆条件分支。<br>求通项因为当时没有想到用表格的形式找规律，就只找到了递推关系式，并且在累加的时候没有考虑好累加的次数导致算错了好几次，如果用表格的话或许就能减少很多时间的浪费。<br>递增序列很容易想到二分，但是这道题要特别考虑右边界，这里也花了不少时间。<br>一堆条件分支删删改改了好久，如果在纸上先分析也可以省下调试的时间。</p>]]></content>
      
      
      <categories>
          
          <category> 小比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022传智杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
